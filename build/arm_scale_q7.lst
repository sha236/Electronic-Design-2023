ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//cco3CxLy.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"arm_scale_q7.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "DSP/Source/BasicMathFunctions/arm_scale_q7.c"
  20              		.section	.text.arm_scale_q7,"ax",%progbits
  21              		.align	1
  22              		.global	arm_scale_q7
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	arm_scale_q7:
  28              	.LVL0:
  29              	.LFB139:
   1:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** /* ----------------------------------------------------------------------
   2:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * Project:      CMSIS DSP Library
   3:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * Title:        arm_scale_q7.c
   4:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * Description:  Multiplies a Q7 vector by a scalar
   5:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  *
   6:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * $Date:        27. January 2017
   7:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * $Revision:    V.1.5.1
   8:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  *
   9:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * Target Processor: Cortex-M cores
  10:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * -------------------------------------------------------------------- */
  11:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** /*
  12:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  *
  14:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  *
  16:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * not use this file except in compliance with the License.
  18:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * You may obtain a copy of the License at
  19:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  *
  20:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  *
  22:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * See the License for the specific language governing permissions and
  26:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * limitations under the License.
  27:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  */
  28:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  29:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** #include "arm_math.h"
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//cco3CxLy.s 			page 2


  30:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  31:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** /**
  32:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * @ingroup groupMath
  33:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  */
  34:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  35:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** /**
  36:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * @addtogroup scale
  37:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * @{
  38:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  */
  39:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  40:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** /**
  41:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * @brief Multiplies a Q7 vector by a scalar.
  42:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * @param[in]       *pSrc points to the input vector
  43:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * @param[in]       scaleFract fractional portion of the scale value
  44:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * @param[in]       shift number of bits to shift the result by
  45:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * @param[out]      *pDst points to the output vector
  46:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * @param[in]       blockSize number of samples in the vector
  47:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * @return none.
  48:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  *
  49:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * <b>Scaling and Overflow Behavior:</b>
  50:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * \par
  51:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * The input data <code>*pSrc</code> and <code>scaleFract</code> are in 1.7 format.
  52:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * These are multiplied to yield a 2.14 intermediate result and this is shifted with saturation to 
  53:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  */
  54:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  55:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** void arm_scale_q7(
  56:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   q7_t * pSrc,
  57:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   q7_t scaleFract,
  58:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   int8_t shift,
  59:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   q7_t * pDst,
  60:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   uint32_t blockSize)
  61:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** {
  30              		.loc 1 61 1 view -0
  31              		.cfi_startproc
  32              		@ args = 4, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 61 1 is_stmt 0 view .LVU1
  35 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 24
  38              		.cfi_offset 4, -24
  39              		.cfi_offset 5, -20
  40              		.cfi_offset 6, -16
  41              		.cfi_offset 7, -12
  42              		.cfi_offset 8, -8
  43              		.cfi_offset 14, -4
  44 0004 069C     		ldr	r4, [sp, #24]
  62:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   int8_t kShift = 7 - shift;                     /* shift to apply after scaling */
  45              		.loc 1 62 3 is_stmt 1 view .LVU2
  46              		.loc 1 62 21 is_stmt 0 view .LVU3
  47 0006 C2F10702 		rsb	r2, r2, #7
  48              	.LVL1:
  49              		.loc 1 62 10 view .LVU4
  50 000a 4FFA82FC 		sxtb	ip, r2
  51              	.LVL2:
  63:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   uint32_t blkCnt;                               /* loop counter */
  52              		.loc 1 63 3 is_stmt 1 view .LVU5
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//cco3CxLy.s 			page 3


  64:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  65:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** #if defined (ARM_MATH_DSP)
  66:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  67:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  68:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   q7_t in1, in2, in3, in4, out1, out2, out3, out4;      /* Temporary variables to store input & out
  53              		.loc 1 68 3 view .LVU6
  69:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  70:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  71:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   /*loop Unrolling */
  72:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   blkCnt = blockSize >> 2U;
  54              		.loc 1 72 3 view .LVU7
  55              		.loc 1 72 10 is_stmt 0 view .LVU8
  56 000e A508     		lsrs	r5, r4, #2
  57              	.LVL3:
  73:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  74:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  75:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  76:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  77:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   while (blkCnt > 0U)
  58              		.loc 1 77 3 is_stmt 1 view .LVU9
  59              		.loc 1 77 9 is_stmt 0 view .LVU10
  60 0010 36E0     		b	.L2
  61              	.L3:
  78:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   {
  79:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     /* Reading 4 inputs from memory */
  80:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     in1 = *pSrc++;
  62              		.loc 1 80 5 is_stmt 1 view .LVU11
  63              	.LVL4:
  64              		.loc 1 80 9 is_stmt 0 view .LVU12
  65 0012 90F90020 		ldrsb	r2, [r0]
  66              	.LVL5:
  81:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     in2 = *pSrc++;
  67              		.loc 1 81 5 is_stmt 1 view .LVU13
  68              		.loc 1 81 9 is_stmt 0 view .LVU14
  69 0016 90F90180 		ldrsb	r8, [r0, #1]
  70              	.LVL6:
  82:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     in3 = *pSrc++;
  71              		.loc 1 82 5 is_stmt 1 view .LVU15
  72              		.loc 1 82 9 is_stmt 0 view .LVU16
  73 001a 90F90260 		ldrsb	r6, [r0, #2]
  74              	.LVL7:
  83:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     in4 = *pSrc++;
  75              		.loc 1 83 5 is_stmt 1 view .LVU17
  76              		.loc 1 83 16 is_stmt 0 view .LVU18
  77 001e 00F1040E 		add	lr, r0, #4
  78              	.LVL8:
  79              		.loc 1 83 9 view .LVU19
  80 0022 90F90370 		ldrsb	r7, [r0, #3]
  81              	.LVL9:
  84:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  85:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     /* C = A * scale */
  86:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     /* Scale the inputs and then store the results in the temporary variables. */
  87:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     out1 = (q7_t) (__SSAT(((in1) * scaleFract) >> kShift, 8));
  82              		.loc 1 87 5 is_stmt 1 view .LVU20
  83              	.LBB2:
  84              		.loc 1 87 20 view .LVU21
  85 0026 01FB02F2 		mul	r2, r1, r2
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//cco3CxLy.s 			page 4


  86 002a 42FA0CF2 		asr	r2, r2, ip
  87              	.LVL10:
  88              		.loc 1 87 20 view .LVU22
  89              		.syntax unified
  90              	@ 87 "DSP/Source/BasicMathFunctions/arm_scale_q7.c" 1
  91 002e 02F30702 		ssat r2, #8, r2
  92              	@ 0 "" 2
  93              	.LVL11:
  94              		.loc 1 87 20 view .LVU23
  95              		.thumb
  96              		.syntax unified
  97              	.LBE2:
  98              		.loc 1 87 10 is_stmt 0 view .LVU24
  99 0032 52B2     		sxtb	r2, r2
 100              	.LVL12:
  88:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     out2 = (q7_t) (__SSAT(((in2) * scaleFract) >> kShift, 8));
 101              		.loc 1 88 5 is_stmt 1 view .LVU25
 102              	.LBB3:
 103              		.loc 1 88 20 view .LVU26
 104 0034 01FB08F0 		mul	r0, r1, r8
 105              	.LVL13:
 106              		.loc 1 88 20 is_stmt 0 view .LVU27
 107 0038 40FA0CF0 		asr	r0, r0, ip
 108              	.LVL14:
 109              		.loc 1 88 20 is_stmt 1 view .LVU28
 110              		.syntax unified
 111              	@ 88 "DSP/Source/BasicMathFunctions/arm_scale_q7.c" 1
 112 003c 00F30700 		ssat r0, #8, r0
 113              	@ 0 "" 2
 114              	.LVL15:
 115              		.loc 1 88 20 view .LVU29
 116              		.thumb
 117              		.syntax unified
 118              	.LBE3:
 119              		.loc 1 88 10 is_stmt 0 view .LVU30
 120 0040 4FFA80F8 		sxtb	r8, r0
 121              	.LVL16:
  89:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     out3 = (q7_t) (__SSAT(((in3) * scaleFract) >> kShift, 8));
 122              		.loc 1 89 5 is_stmt 1 view .LVU31
 123              	.LBB4:
 124              		.loc 1 89 20 view .LVU32
 125 0044 01FB06F0 		mul	r0, r1, r6
 126              	.LVL17:
 127              		.loc 1 89 20 is_stmt 0 view .LVU33
 128 0048 40FA0CF0 		asr	r0, r0, ip
 129              	.LVL18:
 130              		.loc 1 89 20 is_stmt 1 view .LVU34
 131              		.syntax unified
 132              	@ 89 "DSP/Source/BasicMathFunctions/arm_scale_q7.c" 1
 133 004c 00F30700 		ssat r0, #8, r0
 134              	@ 0 "" 2
 135              	.LVL19:
 136              		.loc 1 89 20 view .LVU35
 137              		.thumb
 138              		.syntax unified
 139              	.LBE4:
 140              		.loc 1 89 10 is_stmt 0 view .LVU36
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//cco3CxLy.s 			page 5


 141 0050 40B2     		sxtb	r0, r0
 142              	.LVL20:
  90:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     out4 = (q7_t) (__SSAT(((in4) * scaleFract) >> kShift, 8));
 143              		.loc 1 90 5 is_stmt 1 view .LVU37
 144              	.LBB5:
 145              		.loc 1 90 20 view .LVU38
 146 0052 01FB07F7 		mul	r7, r1, r7
 147 0056 47FA0CF7 		asr	r7, r7, ip
 148              	.LVL21:
 149              		.loc 1 90 20 view .LVU39
 150              		.syntax unified
 151              	@ 90 "DSP/Source/BasicMathFunctions/arm_scale_q7.c" 1
 152 005a 07F30707 		ssat r7, #8, r7
 153              	@ 0 "" 2
 154              	.LVL22:
 155              		.loc 1 90 20 view .LVU40
 156              		.loc 1 90 20 is_stmt 0 view .LVU41
 157              		.thumb
 158              		.syntax unified
 159              	.LBE5:
  91:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  92:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     /* Packing the individual outputs into 32bit and storing in
  93:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****      * destination buffer in single write */
  94:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     *__SIMD32(pDst)++ = __PACKq7(out1, out2, out3, out4);
 160              		.loc 1 94 5 is_stmt 1 view .LVU42
 161              		.loc 1 94 25 is_stmt 0 view .LVU43
 162 005e D2B2     		uxtb	r2, r2
 163              		.loc 1 94 25 view .LVU44
 164 0060 4FEA0828 		lsl	r8, r8, #8
 165              	.LVL23:
 166              		.loc 1 94 25 view .LVU45
 167 0064 1FFA88F8 		uxth	r8, r8
 168 0068 42EA0802 		orr	r2, r2, r8
 169              	.LVL24:
 170              		.loc 1 94 25 view .LVU46
 171 006c 0004     		lsls	r0, r0, #16
 172              	.LVL25:
 173              		.loc 1 94 25 view .LVU47
 174 006e 00F47F00 		and	r0, r0, #16711680
 175 0072 0243     		orrs	r2, r2, r0
 176              	.LVL26:
 177              		.loc 1 94 25 view .LVU48
 178 0074 42EA0762 		orr	r2, r2, r7, lsl #24
 179              		.loc 1 94 23 view .LVU49
 180 0078 43F8042B 		str	r2, [r3], #4
 181              	.LVL27:
  95:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  96:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     /* Decrement the loop counter */
  97:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     blkCnt--;
 182              		.loc 1 97 5 is_stmt 1 view .LVU50
 183              		.loc 1 97 11 is_stmt 0 view .LVU51
 184 007c 013D     		subs	r5, r5, #1
 185              	.LVL28:
  83:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 186              		.loc 1 83 16 view .LVU52
 187 007e 7046     		mov	r0, lr
 188              	.LVL29:
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//cco3CxLy.s 			page 6


 189              	.L2:
  77:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   {
 190              		.loc 1 77 17 is_stmt 1 view .LVU53
 191 0080 002D     		cmp	r5, #0
 192 0082 C6D1     		bne	.L3
  98:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   }
  99:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 100:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 101:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****    ** No loop unrolling is used. */
 102:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   blkCnt = blockSize % 0x4U;
 193              		.loc 1 102 3 view .LVU54
 194              		.loc 1 102 10 is_stmt 0 view .LVU55
 195 0084 04F00304 		and	r4, r4, #3
 196              	.LVL30:
 103:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 104:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   while (blkCnt > 0U)
 197              		.loc 1 104 3 is_stmt 1 view .LVU56
 198              		.loc 1 104 9 is_stmt 0 view .LVU57
 199 0088 0AE0     		b	.L4
 200              	.L5:
 105:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   {
 106:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     /* C = A * scale */
 107:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     /* Scale the input and then store the result in the destination buffer. */
 108:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     *pDst++ = (q7_t) (__SSAT(((*pSrc++) * scaleFract) >> kShift, 8));
 201              		.loc 1 108 5 is_stmt 1 view .LVU58
 202              	.LBB6:
 203              		.loc 1 108 23 view .LVU59
 204              	.LVL31:
 205              		.loc 1 108 23 is_stmt 0 view .LVU60
 206 008a 10F9012B 		ldrsb	r2, [r0], #1
 207              	.LVL32:
 208              		.loc 1 108 23 view .LVU61
 209 008e 01FB02F2 		mul	r2, r1, r2
 210 0092 42FA0CF2 		asr	r2, r2, ip
 211              	.LVL33:
 212              		.loc 1 108 23 is_stmt 1 view .LVU62
 213              		.syntax unified
 214              	@ 108 "DSP/Source/BasicMathFunctions/arm_scale_q7.c" 1
 215 0096 02F30702 		ssat r2, #8, r2
 216              	@ 0 "" 2
 217              	.LVL34:
 218              		.loc 1 108 23 view .LVU63
 219              		.loc 1 108 23 is_stmt 0 view .LVU64
 220              		.thumb
 221              		.syntax unified
 222              	.LBE6:
 223              		.loc 1 108 13 view .LVU65
 224 009a 03F8012B 		strb	r2, [r3], #1
 225              	.LVL35:
 109:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 110:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     /* Decrement the loop counter */
 111:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     blkCnt--;
 226              		.loc 1 111 5 is_stmt 1 view .LVU66
 227              		.loc 1 111 11 is_stmt 0 view .LVU67
 228 009e 013C     		subs	r4, r4, #1
 229              	.LVL36:
 230              	.L4:
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//cco3CxLy.s 			page 7


 104:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   {
 231              		.loc 1 104 17 is_stmt 1 view .LVU68
 232 00a0 002C     		cmp	r4, #0
 233 00a2 F2D1     		bne	.L5
 112:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   }
 113:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 114:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** #else
 115:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 116:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   /* Run the below code for Cortex-M0 */
 117:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 118:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   /* Initialize blkCnt with number of samples */
 119:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   blkCnt = blockSize;
 120:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 121:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   while (blkCnt > 0U)
 122:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   {
 123:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     /* C = A * scale */
 124:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     /* Scale the input and then store the result in the destination buffer. */
 125:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     *pDst++ = (q7_t) (__SSAT((((q15_t) * pSrc++ * scaleFract) >> kShift), 8));
 126:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 127:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     /* Decrement the loop counter */
 128:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     blkCnt--;
 129:DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   }
 130:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 131:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** #endif /* #if defined (ARM_MATH_DSP) */
 132:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 133:DSP/Source/BasicMathFunctions/arm_scale_q7.c **** }
 234              		.loc 1 133 1 is_stmt 0 view .LVU69
 235 00a4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 236              		.loc 1 133 1 view .LVU70
 237              		.cfi_endproc
 238              	.LFE139:
 240              		.text
 241              	.Letext0:
 242              		.file 2 "/Users/luban/.local/xPacks/arm-none-eabi-gcc/xpack-arm-none-eabi-gcc-13.2.1-1.1/arm-none-
 243              		.file 3 "/Users/luban/.local/xPacks/arm-none-eabi-gcc/xpack-arm-none-eabi-gcc-13.2.1-1.1/arm-none-
 244              		.file 4 "DSP/Inc/arm_math.h"
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//cco3CxLy.s 			page 8


DEFINED SYMBOLS
                            *ABS*:00000000 arm_scale_q7.c
/var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//cco3CxLy.s:21     .text.arm_scale_q7:00000000 $t
/var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//cco3CxLy.s:27     .text.arm_scale_q7:00000000 arm_scale_q7

NO UNDEFINED SYMBOLS
