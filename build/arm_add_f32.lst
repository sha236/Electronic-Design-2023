ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccjwdYfm.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"arm_add_f32.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "DSP/Source/BasicMathFunctions/arm_add_f32.c"
  20              		.section	.text.arm_add_f32,"ax",%progbits
  21              		.align	1
  22              		.global	arm_add_f32
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	arm_add_f32:
  28              	.LVL0:
  29              	.LFB139:
   1:DSP/Source/BasicMathFunctions/arm_add_f32.c **** /* ----------------------------------------------------------------------
   2:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * Project:      CMSIS DSP Library
   3:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * Title:        arm_add_f32.c
   4:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * Description:  Floating-point vector addition
   5:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  *
   6:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * $Date:        27. January 2017
   7:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * $Revision:    V.1.5.1
   8:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  *
   9:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * Target Processor: Cortex-M cores
  10:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * -------------------------------------------------------------------- */
  11:DSP/Source/BasicMathFunctions/arm_add_f32.c **** /*
  12:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  *
  14:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  *
  16:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * not use this file except in compliance with the License.
  18:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * You may obtain a copy of the License at
  19:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  *
  20:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  *
  22:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * See the License for the specific language governing permissions and
  26:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * limitations under the License.
  27:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  */
  28:DSP/Source/BasicMathFunctions/arm_add_f32.c **** 
  29:DSP/Source/BasicMathFunctions/arm_add_f32.c **** #include "arm_math.h"
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccjwdYfm.s 			page 2


  30:DSP/Source/BasicMathFunctions/arm_add_f32.c **** 
  31:DSP/Source/BasicMathFunctions/arm_add_f32.c **** /**
  32:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * @ingroup groupMath
  33:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  */
  34:DSP/Source/BasicMathFunctions/arm_add_f32.c **** 
  35:DSP/Source/BasicMathFunctions/arm_add_f32.c **** /**
  36:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * @defgroup BasicAdd Vector Addition
  37:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  *
  38:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * Element-by-element addition of two vectors.
  39:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  *
  40:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * <pre>
  41:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  *     pDst[n] = pSrcA[n] + pSrcB[n],   0 <= n < blockSize.
  42:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * </pre>
  43:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  *
  44:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * There are separate functions for floating-point, Q7, Q15, and Q31 data types.
  45:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  */
  46:DSP/Source/BasicMathFunctions/arm_add_f32.c **** 
  47:DSP/Source/BasicMathFunctions/arm_add_f32.c **** /**
  48:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * @addtogroup BasicAdd
  49:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * @{
  50:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  */
  51:DSP/Source/BasicMathFunctions/arm_add_f32.c **** 
  52:DSP/Source/BasicMathFunctions/arm_add_f32.c **** /**
  53:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * @brief Floating-point vector addition.
  54:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * @param[in]       *pSrcA points to the first input vector
  55:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * @param[in]       *pSrcB points to the second input vector
  56:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * @param[out]      *pDst points to the output vector
  57:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * @param[in]       blockSize number of samples in each vector
  58:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  * @return none.
  59:DSP/Source/BasicMathFunctions/arm_add_f32.c ****  */
  60:DSP/Source/BasicMathFunctions/arm_add_f32.c **** 
  61:DSP/Source/BasicMathFunctions/arm_add_f32.c **** void arm_add_f32(
  62:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   float32_t * pSrcA,
  63:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   float32_t * pSrcB,
  64:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   float32_t * pDst,
  65:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   uint32_t blockSize)
  66:DSP/Source/BasicMathFunctions/arm_add_f32.c **** {
  30              		.loc 1 66 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              		.loc 1 66 1 is_stmt 0 view .LVU1
  36 0000 10B4     		push	{r4}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 4
  39              		.cfi_offset 4, -4
  67:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   uint32_t blkCnt;                               /* loop counter */
  40              		.loc 1 67 3 is_stmt 1 view .LVU2
  68:DSP/Source/BasicMathFunctions/arm_add_f32.c **** 
  69:DSP/Source/BasicMathFunctions/arm_add_f32.c **** #if defined (ARM_MATH_DSP)
  70:DSP/Source/BasicMathFunctions/arm_add_f32.c **** 
  71:DSP/Source/BasicMathFunctions/arm_add_f32.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  72:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   float32_t inA1, inA2, inA3, inA4;              /* temporary input variabels */
  41              		.loc 1 72 3 view .LVU3
  73:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   float32_t inB1, inB2, inB3, inB4;              /* temporary input variables */
  42              		.loc 1 73 3 view .LVU4
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccjwdYfm.s 			page 3


  74:DSP/Source/BasicMathFunctions/arm_add_f32.c **** 
  75:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   /*loop Unrolling */
  76:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   blkCnt = blockSize >> 2U;
  43              		.loc 1 76 3 view .LVU5
  44              		.loc 1 76 10 is_stmt 0 view .LVU6
  45 0002 9C08     		lsrs	r4, r3, #2
  46              	.LVL1:
  77:DSP/Source/BasicMathFunctions/arm_add_f32.c **** 
  78:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  79:DSP/Source/BasicMathFunctions/arm_add_f32.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  80:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   while (blkCnt > 0U)
  47              		.loc 1 80 3 is_stmt 1 view .LVU7
  48              		.loc 1 80 9 is_stmt 0 view .LVU8
  49 0004 23E0     		b	.L2
  50              	.L3:
  81:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   {
  82:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     /* C = A + B */
  83:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     /* Add and then store the results in the destination buffer. */
  84:DSP/Source/BasicMathFunctions/arm_add_f32.c **** 
  85:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     /* read four inputs from sourceA and four inputs from sourceB */
  86:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     inA1 = *pSrcA;
  51              		.loc 1 86 5 is_stmt 1 view .LVU9
  52              		.loc 1 86 10 is_stmt 0 view .LVU10
  53 0006 90ED006A 		vldr.32	s12, [r0]
  54              	.LVL2:
  87:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     inB1 = *pSrcB;
  55              		.loc 1 87 5 is_stmt 1 view .LVU11
  56              		.loc 1 87 10 is_stmt 0 view .LVU12
  57 000a 91ED004A 		vldr.32	s8, [r1]
  58              	.LVL3:
  88:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     inA2 = *(pSrcA + 1);
  59              		.loc 1 88 5 is_stmt 1 view .LVU13
  60              		.loc 1 88 10 is_stmt 0 view .LVU14
  61 000e D0ED016A 		vldr.32	s13, [r0, #4]
  62              	.LVL4:
  89:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     inB2 = *(pSrcB + 1);
  63              		.loc 1 89 5 is_stmt 1 view .LVU15
  64              		.loc 1 89 10 is_stmt 0 view .LVU16
  65 0012 D1ED014A 		vldr.32	s9, [r1, #4]
  66              	.LVL5:
  90:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     inA3 = *(pSrcA + 2);
  67              		.loc 1 90 5 is_stmt 1 view .LVU17
  68              		.loc 1 90 10 is_stmt 0 view .LVU18
  69 0016 90ED027A 		vldr.32	s14, [r0, #8]
  70              	.LVL6:
  91:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     inB3 = *(pSrcB + 2);
  71              		.loc 1 91 5 is_stmt 1 view .LVU19
  72              		.loc 1 91 10 is_stmt 0 view .LVU20
  73 001a 91ED025A 		vldr.32	s10, [r1, #8]
  74              	.LVL7:
  92:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     inA4 = *(pSrcA + 3);
  75              		.loc 1 92 5 is_stmt 1 view .LVU21
  76              		.loc 1 92 10 is_stmt 0 view .LVU22
  77 001e D0ED037A 		vldr.32	s15, [r0, #12]
  78              	.LVL8:
  93:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     inB4 = *(pSrcB + 3);
  79              		.loc 1 93 5 is_stmt 1 view .LVU23
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccjwdYfm.s 			page 4


  80              		.loc 1 93 10 is_stmt 0 view .LVU24
  81 0022 D1ED035A 		vldr.32	s11, [r1, #12]
  82              	.LVL9:
  94:DSP/Source/BasicMathFunctions/arm_add_f32.c **** 
  95:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     /* C = A + B */
  96:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     /* add and store result to destination */
  97:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     *pDst = inA1 + inB1;
  83              		.loc 1 97 5 is_stmt 1 view .LVU25
  84              		.loc 1 97 18 is_stmt 0 view .LVU26
  85 0026 36EE046A 		vadd.f32	s12, s12, s8
  86              	.LVL10:
  87              		.loc 1 97 11 view .LVU27
  88 002a 82ED006A 		vstr.32	s12, [r2]
  89              	.LVL11:
  98:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     *(pDst + 1) = inA2 + inB2;
  90              		.loc 1 98 5 is_stmt 1 view .LVU28
  91              		.loc 1 98 24 is_stmt 0 view .LVU29
  92 002e 76EEA46A 		vadd.f32	s13, s13, s9
  93              	.LVL12:
  94              		.loc 1 98 17 view .LVU30
  95 0032 C2ED016A 		vstr.32	s13, [r2, #4]
  99:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     *(pDst + 2) = inA3 + inB3;
  96              		.loc 1 99 5 is_stmt 1 view .LVU31
  97              		.loc 1 99 24 is_stmt 0 view .LVU32
  98 0036 37EE057A 		vadd.f32	s14, s14, s10
  99              	.LVL13:
 100              		.loc 1 99 17 view .LVU33
 101 003a 82ED027A 		vstr.32	s14, [r2, #8]
 100:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     *(pDst + 3) = inA4 + inB4;
 102              		.loc 1 100 5 is_stmt 1 view .LVU34
 103              		.loc 1 100 24 is_stmt 0 view .LVU35
 104 003e 77EEA57A 		vadd.f32	s15, s15, s11
 105              	.LVL14:
 106              		.loc 1 100 17 view .LVU36
 107 0042 C2ED037A 		vstr.32	s15, [r2, #12]
 101:DSP/Source/BasicMathFunctions/arm_add_f32.c **** 
 102:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     /* update pointers to process next samples */
 103:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     pSrcA += 4U;
 108              		.loc 1 103 5 is_stmt 1 view .LVU37
 109              		.loc 1 103 11 is_stmt 0 view .LVU38
 110 0046 1030     		adds	r0, r0, #16
 111              	.LVL15:
 104:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     pSrcB += 4U;
 112              		.loc 1 104 5 is_stmt 1 view .LVU39
 113              		.loc 1 104 11 is_stmt 0 view .LVU40
 114 0048 1031     		adds	r1, r1, #16
 115              	.LVL16:
 105:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     pDst += 4U;
 116              		.loc 1 105 5 is_stmt 1 view .LVU41
 117              		.loc 1 105 10 is_stmt 0 view .LVU42
 118 004a 1032     		adds	r2, r2, #16
 119              	.LVL17:
 106:DSP/Source/BasicMathFunctions/arm_add_f32.c **** 
 107:DSP/Source/BasicMathFunctions/arm_add_f32.c **** 
 108:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     /* Decrement the loop counter */
 109:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     blkCnt--;
 120              		.loc 1 109 5 is_stmt 1 view .LVU43
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccjwdYfm.s 			page 5


 121              		.loc 1 109 11 is_stmt 0 view .LVU44
 122 004c 013C     		subs	r4, r4, #1
 123              	.LVL18:
 124              	.L2:
  80:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   {
 125              		.loc 1 80 17 is_stmt 1 view .LVU45
 126 004e 002C     		cmp	r4, #0
 127 0050 D9D1     		bne	.L3
 110:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   }
 111:DSP/Source/BasicMathFunctions/arm_add_f32.c **** 
 112:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 113:DSP/Source/BasicMathFunctions/arm_add_f32.c ****    ** No loop unrolling is used. */
 114:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   blkCnt = blockSize % 0x4U;
 128              		.loc 1 114 3 view .LVU46
 129              		.loc 1 114 10 is_stmt 0 view .LVU47
 130 0052 03F00303 		and	r3, r3, #3
 131              	.LVL19:
 115:DSP/Source/BasicMathFunctions/arm_add_f32.c **** 
 116:DSP/Source/BasicMathFunctions/arm_add_f32.c **** #else
 117:DSP/Source/BasicMathFunctions/arm_add_f32.c **** 
 118:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   /* Run the below code for Cortex-M0 */
 119:DSP/Source/BasicMathFunctions/arm_add_f32.c **** 
 120:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   /* Initialize blkCnt with number of samples */
 121:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   blkCnt = blockSize;
 122:DSP/Source/BasicMathFunctions/arm_add_f32.c **** 
 123:DSP/Source/BasicMathFunctions/arm_add_f32.c **** #endif /* #if defined (ARM_MATH_DSP) */
 124:DSP/Source/BasicMathFunctions/arm_add_f32.c **** 
 125:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   while (blkCnt > 0U)
 132              		.loc 1 125 3 is_stmt 1 view .LVU48
 133              		.loc 1 125 9 is_stmt 0 view .LVU49
 134 0056 08E0     		b	.L4
 135              	.L5:
 126:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   {
 127:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     /* C = A + B */
 128:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     /* Add and then store the results in the destination buffer. */
 129:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     *pDst++ = (*pSrcA++) + (*pSrcB++);
 136              		.loc 1 129 5 is_stmt 1 view .LVU50
 137              	.LVL20:
 138              		.loc 1 129 16 is_stmt 0 view .LVU51
 139 0058 F0EC017A 		vldmia.32	r0!, {s15}
 140              	.LVL21:
 141              		.loc 1 129 29 view .LVU52
 142 005c B1EC017A 		vldmia.32	r1!, {s14}
 143              	.LVL22:
 144              		.loc 1 129 26 view .LVU53
 145 0060 77EE877A 		vadd.f32	s15, s15, s14
 146              		.loc 1 129 13 view .LVU54
 147 0064 E2EC017A 		vstmia.32	r2!, {s15}
 148              	.LVL23:
 130:DSP/Source/BasicMathFunctions/arm_add_f32.c **** 
 131:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     /* Decrement the loop counter */
 132:DSP/Source/BasicMathFunctions/arm_add_f32.c ****     blkCnt--;
 149              		.loc 1 132 5 is_stmt 1 view .LVU55
 150              		.loc 1 132 11 is_stmt 0 view .LVU56
 151 0068 013B     		subs	r3, r3, #1
 152              	.LVL24:
 153              	.L4:
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccjwdYfm.s 			page 6


 125:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   {
 154              		.loc 1 125 17 is_stmt 1 view .LVU57
 155 006a 002B     		cmp	r3, #0
 156 006c F4D1     		bne	.L5
 133:DSP/Source/BasicMathFunctions/arm_add_f32.c ****   }
 134:DSP/Source/BasicMathFunctions/arm_add_f32.c **** }
 157              		.loc 1 134 1 is_stmt 0 view .LVU58
 158 006e 5DF8044B 		ldr	r4, [sp], #4
 159              	.LCFI1:
 160              		.cfi_restore 4
 161              		.cfi_def_cfa_offset 0
 162 0072 7047     		bx	lr
 163              		.cfi_endproc
 164              	.LFE139:
 166              		.text
 167              	.Letext0:
 168              		.file 2 "/Users/luban/.local/xPacks/arm-none-eabi-gcc/xpack-arm-none-eabi-gcc-13.2.1-1.1/arm-none-
 169              		.file 3 "/Users/luban/.local/xPacks/arm-none-eabi-gcc/xpack-arm-none-eabi-gcc-13.2.1-1.1/arm-none-
 170              		.file 4 "DSP/Inc/arm_math.h"
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccjwdYfm.s 			page 7


DEFINED SYMBOLS
                            *ABS*:00000000 arm_add_f32.c
/var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccjwdYfm.s:21     .text.arm_add_f32:00000000 $t
/var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccjwdYfm.s:27     .text.arm_add_f32:00000000 arm_add_f32

NO UNDEFINED SYMBOLS
