ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccHrJEMS.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"arm_lms_f32.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "DSP/Source/FilteringFunctions/arm_lms_f32.c"
  20              		.section	.text.arm_lms_f32,"ax",%progbits
  21              		.align	1
  22              		.global	arm_lms_f32
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	arm_lms_f32:
  28              	.LVL0:
  29              	.LFB139:
   1:DSP/Source/FilteringFunctions/arm_lms_f32.c **** /* ----------------------------------------------------------------------
   2:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Project:      CMSIS DSP Library
   3:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Title:        arm_lms_f32.c
   4:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Description:  Processing function for the floating-point LMS filter
   5:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
   6:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * $Date:        27. January 2017
   7:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * $Revision:    V.1.5.1
   8:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
   9:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Target Processor: Cortex-M cores
  10:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * -------------------------------------------------------------------- */
  11:DSP/Source/FilteringFunctions/arm_lms_f32.c **** /*
  12:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
  14:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
  16:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * not use this file except in compliance with the License.
  18:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * You may obtain a copy of the License at
  19:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
  20:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
  22:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * See the License for the specific language governing permissions and
  26:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * limitations under the License.
  27:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  */
  28:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
  29:DSP/Source/FilteringFunctions/arm_lms_f32.c **** #include "arm_math.h"
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccHrJEMS.s 			page 2


  30:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
  31:DSP/Source/FilteringFunctions/arm_lms_f32.c **** /**
  32:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * @ingroup groupFilters
  33:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  */
  34:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
  35:DSP/Source/FilteringFunctions/arm_lms_f32.c **** /**
  36:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * @defgroup LMS Least Mean Square (LMS) Filters
  37:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
  38:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * LMS filters are a class of adaptive filters that are able to "learn" an unknown transfer functio
  39:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * LMS filters use a gradient descent method in which the filter coefficients are updated based on 
  40:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Adaptive filters are often used in communication systems, equalizers, and noise removal.
  41:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * The CMSIS DSP Library contains LMS filter functions that operate on Q15, Q31, and floating-point
  42:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * The library also contains normalized LMS filters in which the filter coefficient adaptation is i
  43:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
  44:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * An LMS filter consists of two components as shown below.
  45:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * The first component is a standard transversal or FIR filter.
  46:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * The second component is a coefficient update mechanism.
  47:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * The LMS filter has two input signals.
  48:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * The "input" feeds the FIR filter while the "reference input" corresponds to the desired output o
  49:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * That is, the FIR filter coefficients are updated so that the output of the FIR filter matches th
  50:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * The filter coefficient update mechanism is based on the difference between the FIR filter output
  51:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * This "error signal" tends towards zero as the filter adapts.
  52:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * The LMS processing functions accept the input and reference input signals and generate the filte
  53:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * \image html LMS.gif "Internal structure of the Least Mean Square filter"
  54:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
  55:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * The functions operate on blocks of data and each call to the function processes
  56:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * <code>blockSize</code> samples through the filter.
  57:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * <code>pSrc</code> points to input signal, <code>pRef</code> points to reference signal,
  58:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * <code>pOut</code> points to output signal and <code>pErr</code> points to error signal.
  59:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * All arrays contain <code>blockSize</code> values.
  60:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
  61:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * The functions operate on a block-by-block basis.
  62:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Internally, the filter coefficients <code>b[n]</code> are updated on a sample-by-sample basis.
  63:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * The convergence of the LMS filter is slower compared to the normalized LMS algorithm.
  64:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
  65:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * \par Algorithm:
  66:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * The output signal <code>y[n]</code> is computed by a standard FIR filter:
  67:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * <pre>
  68:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *     y[n] = b[0] * x[n] + b[1] * x[n-1] + b[2] * x[n-2] + ...+ b[numTaps-1] * x[n-numTaps+1]
  69:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * </pre>
  70:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
  71:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * \par
  72:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * The error signal equals the difference between the reference signal <code>d[n]</code> and the fi
  73:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * <pre>
  74:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *     e[n] = d[n] - y[n].
  75:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * </pre>
  76:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
  77:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * \par
  78:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * After each sample of the error signal is computed, the filter coefficients <code>b[k]</code> are
  79:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * <pre>
  80:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *     b[k] = b[k] + e[n] * mu * x[n-k],  for k=0, 1, ..., numTaps-1
  81:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * </pre>
  82:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * where <code>mu</code> is the step size and controls the rate of coefficient convergence.
  83:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *\par
  84:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * In the APIs, <code>pCoeffs</code> points to a coefficient array of size <code>numTaps</code>.
  85:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Coefficients are stored in time reversed order.
  86:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * \par
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccHrJEMS.s 			page 3


  87:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * <pre>
  88:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *    {b[numTaps-1], b[numTaps-2], b[N-2], ..., b[1], b[0]}
  89:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * </pre>
  90:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * \par
  91:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * <code>pState</code> points to a state array of size <code>numTaps + blockSize - 1</code>.
  92:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Samples in the state buffer are stored in the order:
  93:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * \par
  94:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * <pre>
  95:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *    {x[n-numTaps+1], x[n-numTaps], x[n-numTaps-1], x[n-numTaps-2]....x[0], x[1], ..., x[blockSize
  96:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * </pre>
  97:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * \par
  98:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Note that the length of the state buffer exceeds the length of the coefficient array by <code>bl
  99:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * The increased state buffer length allows circular addressing, which is traditionally used in FIR
 100:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * to be avoided and yields a significant speed improvement.
 101:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * The state variables are updated after each block of data is processed.
 102:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * \par Instance Structure
 103:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * The coefficients and state variables for a filter are stored together in an instance data struct
 104:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * A separate instance structure must be defined for each filter and
 105:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * coefficient and state arrays cannot be shared among instances.
 106:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * There are separate instance structure declarations for each of the 3 supported data types.
 107:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
 108:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * \par Initialization Functions
 109:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * There is also an associated initialization function for each data type.
 110:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * The initialization function performs the following operations:
 111:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * - Sets the values of the internal structure fields.
 112:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * - Zeros out the values in the state buffer.
 113:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * To do this manually without calling the init function, assign the follow subfields of the instan
 114:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * numTaps, pCoeffs, mu, postShift (not for f32), pState. Also set all of the values in pState to z
 115:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
 116:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * \par
 117:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Use of the initialization function is optional.
 118:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * However, if the initialization function is used, then the instance structure cannot be placed in
 119:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * To place an instance structure into a const data section, the instance structure must be manuall
 120:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Set the values in the state buffer to zeros before static initialization.
 121:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * The code below statically initializes each of the 3 different data type filter instance structur
 122:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * <pre>
 123:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *    arm_lms_instance_f32 S = {numTaps, pState, pCoeffs, mu};
 124:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *    arm_lms_instance_q31 S = {numTaps, pState, pCoeffs, mu, postShift};
 125:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *    arm_lms_instance_q15 S = {numTaps, pState, pCoeffs, mu, postShift};
 126:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * </pre>
 127:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * where <code>numTaps</code> is the number of filter coefficients in the filter; <code>pState</cod
 128:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * <code>pCoeffs</code> is the address of the coefficient buffer; <code>mu</code> is the step size 
 129:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
 130:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * \par Fixed-Point Behavior:
 131:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Care must be taken when using the Q15 and Q31 versions of the LMS filter.
 132:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * The following issues must be considered:
 133:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * - Scaling of coefficients
 134:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * - Overflow and saturation
 135:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
 136:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * \par Scaling of Coefficients:
 137:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Filter coefficients are represented as fractional values and
 138:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * coefficients are restricted to lie in the range <code>[-1 +1)</code>.
 139:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * The fixed-point functions have an additional scaling parameter <code>postShift</code>.
 140:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * At the output of the filter's accumulator is a shift register which shifts the result by <code>p
 141:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * This essentially scales the filter coefficients by <code>2^postShift</code> and
 142:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * allows the filter coefficients to exceed the range <code>[+1 -1)</code>.
 143:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * The value of <code>postShift</code> is set by the user based on the expected gain through the sy
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccHrJEMS.s 			page 4


 144:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
 145:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * \par Overflow and Saturation:
 146:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Overflow and saturation behavior of the fixed-point Q15 and Q31 versions are
 147:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * described separately as part of the function specific documentation below.
 148:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  */
 149:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 150:DSP/Source/FilteringFunctions/arm_lms_f32.c **** /**
 151:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * @addtogroup LMS
 152:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * @{
 153:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  */
 154:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 155:DSP/Source/FilteringFunctions/arm_lms_f32.c **** /**
 156:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * @details
 157:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * This function operates on floating-point data types.
 158:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
 159:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * @brief Processing function for floating-point LMS filter.
 160:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * @param[in]  *S points to an instance of the floating-point LMS filter structure.
 161:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * @param[in]  *pSrc points to the block of input data.
 162:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * @param[in]  *pRef points to the block of reference data.
 163:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * @param[out] *pOut points to the block of output data.
 164:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * @param[out] *pErr points to the block of error data.
 165:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * @param[in]  blockSize number of samples to process.
 166:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * @return     none.
 167:DSP/Source/FilteringFunctions/arm_lms_f32.c ****  */
 168:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 169:DSP/Source/FilteringFunctions/arm_lms_f32.c **** void arm_lms_f32(
 170:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   const arm_lms_instance_f32 * S,
 171:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32_t * pSrc,
 172:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32_t * pRef,
 173:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32_t * pOut,
 174:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32_t * pErr,
 175:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   uint32_t blockSize)
 176:DSP/Source/FilteringFunctions/arm_lms_f32.c **** {
  30              		.loc 1 176 1 view -0
  31              		.cfi_startproc
  32              		@ args = 8, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 176 1 is_stmt 0 view .LVU1
  35 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 36
  38              		.cfi_offset 4, -36
  39              		.cfi_offset 5, -32
  40              		.cfi_offset 6, -28
  41              		.cfi_offset 7, -24
  42              		.cfi_offset 8, -20
  43              		.cfi_offset 9, -16
  44              		.cfi_offset 10, -12
  45              		.cfi_offset 11, -8
  46              		.cfi_offset 14, -4
  47 0004 8046     		mov	r8, r0
  48 0006 1646     		mov	r6, r2
  49 0008 1D46     		mov	r5, r3
  50 000a DDF828A0 		ldr	r10, [sp, #40]
 177:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32_t *pState = S->pState;                 /* State pointer */
  51              		.loc 1 177 3 is_stmt 1 view .LVU2
  52              		.loc 1 177 14 is_stmt 0 view .LVU3
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccHrJEMS.s 			page 5


  53 000e 4068     		ldr	r0, [r0, #4]
  54              	.LVL1:
 178:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
  55              		.loc 1 178 3 is_stmt 1 view .LVU4
  56              		.loc 1 178 14 is_stmt 0 view .LVU5
  57 0010 D8F808B0 		ldr	fp, [r8, #8]
  58              	.LVL2:
 179:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32_t *pStateCurnt;                        /* Points to the current sample of the state */
  59              		.loc 1 179 3 is_stmt 1 view .LVU6
 180:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32_t *px, *pb;                            /* Temporary pointers for state and coefficient bu
  60              		.loc 1 180 3 view .LVU7
 181:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32_t mu = S->mu;                          /* Adaptive factor */
  61              		.loc 1 181 3 view .LVU8
  62              		.loc 1 181 13 is_stmt 0 view .LVU9
  63 0014 D8ED036A 		vldr.32	s13, [r8, #12]
  64              	.LVL3:
 182:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
  65              		.loc 1 182 3 is_stmt 1 view .LVU10
  66              		.loc 1 182 23 is_stmt 0 view .LVU11
  67 0018 B8F80090 		ldrh	r9, [r8]
  68              	.LVL4:
 183:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   uint32_t tapCnt, blkCnt;                       /* Loop counters */
  69              		.loc 1 183 3 is_stmt 1 view .LVU12
 184:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32_t sum, e, d;                           /* accumulator, error, reference data sample */
  70              		.loc 1 184 3 view .LVU13
 185:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32_t w = 0.0f;                            /* weight factor */
  71              		.loc 1 185 3 view .LVU14
 186:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 187:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   e = 0.0f;
  72              		.loc 1 187 3 view .LVU15
 188:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   d = 0.0f;
  73              		.loc 1 188 3 view .LVU16
 189:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 190:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
 191:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* pStateCurnt points to the location where the new input data should be written */
 192:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   pStateCurnt = &(S->pState[(numTaps - 1U)]);
  74              		.loc 1 192 3 view .LVU17
  75              		.loc 1 192 28 is_stmt 0 view .LVU18
  76 001c 09F18044 		add	r4, r9, #1073741824
  77 0020 013C     		subs	r4, r4, #1
  78              		.loc 1 192 15 view .LVU19
  79 0022 00EB8404 		add	r4, r0, r4, lsl #2
  80              	.LVL5:
 193:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 194:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   blkCnt = blockSize;
  81              		.loc 1 194 3 is_stmt 1 view .LVU20
 195:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 196:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 197:DSP/Source/FilteringFunctions/arm_lms_f32.c **** #if defined (ARM_MATH_DSP)
 198:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 199:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
 200:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 201:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   while (blkCnt > 0U)
  82              		.loc 1 201 3 view .LVU21
  83 0026 A446     		mov	ip, r4
  84 0028 8E46     		mov	lr, r1
  85              		.loc 1 201 9 is_stmt 0 view .LVU22
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccHrJEMS.s 			page 6


  86 002a 80E0     		b	.L2
  87              	.LVL6:
  88              	.L4:
 202:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   {
 203:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Copy the new input sample into the state buffer */
 204:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pSrc++;
 205:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 206:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Initialize pState pointer */
 207:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     px = pState;
 208:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 209:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Initialize coeff pointer */
 210:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     pb = (pCoeffs);
 211:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 212:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Set the accumulator to zero */
 213:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     sum = 0.0f;
 214:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 215:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Loop unrolling.  Process 4 taps at a time. */
 216:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps >> 2;
 217:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 218:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     while (tapCnt > 0U)
 219:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
 220:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 221:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
  89              		.loc 1 221 7 is_stmt 1 view .LVU23
  90              		.loc 1 221 15 is_stmt 0 view .LVU24
  91 002c 93ED007A 		vldr.32	s14, [r3]
  92              	.LVL7:
  93              		.loc 1 221 25 view .LVU25
  94 0030 92ED006A 		vldr.32	s12, [r2]
  95              		.loc 1 221 22 view .LVU26
  96 0034 27EE067A 		vmul.f32	s14, s14, s12
  97              		.loc 1 221 11 view .LVU27
  98 0038 77EE877A 		vadd.f32	s15, s15, s14
  99              	.LVL8:
 222:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
 100              		.loc 1 222 7 is_stmt 1 view .LVU28
 101              		.loc 1 222 15 is_stmt 0 view .LVU29
 102 003c 93ED017A 		vldr.32	s14, [r3, #4]
 103              	.LVL9:
 104              		.loc 1 222 25 view .LVU30
 105 0040 92ED016A 		vldr.32	s12, [r2, #4]
 106              		.loc 1 222 22 view .LVU31
 107 0044 27EE067A 		vmul.f32	s14, s14, s12
 108              		.loc 1 222 11 view .LVU32
 109 0048 77EE877A 		vadd.f32	s15, s15, s14
 110              	.LVL10:
 223:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
 111              		.loc 1 223 7 is_stmt 1 view .LVU33
 112              		.loc 1 223 15 is_stmt 0 view .LVU34
 113 004c 93ED027A 		vldr.32	s14, [r3, #8]
 114              	.LVL11:
 115              		.loc 1 223 25 view .LVU35
 116 0050 92ED026A 		vldr.32	s12, [r2, #8]
 117              		.loc 1 223 22 view .LVU36
 118 0054 27EE067A 		vmul.f32	s14, s14, s12
 119              		.loc 1 223 11 view .LVU37
 120 0058 77EE877A 		vadd.f32	s15, s15, s14
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccHrJEMS.s 			page 7


 121              	.LVL12:
 224:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
 122              		.loc 1 224 7 is_stmt 1 view .LVU38
 123              		.loc 1 224 15 is_stmt 0 view .LVU39
 124 005c 93ED037A 		vldr.32	s14, [r3, #12]
 125              	.LVL13:
 126              		.loc 1 224 25 view .LVU40
 127 0060 92ED036A 		vldr.32	s12, [r2, #12]
 128              		.loc 1 224 22 view .LVU41
 129 0064 27EE067A 		vmul.f32	s14, s14, s12
 130              		.loc 1 224 11 view .LVU42
 131 0068 77EE877A 		vadd.f32	s15, s15, s14
 132              	.LVL14:
 225:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 226:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 227:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 133              		.loc 1 227 7 is_stmt 1 view .LVU43
 134              		.loc 1 227 13 is_stmt 0 view .LVU44
 135 006c 0139     		subs	r1, r1, #1
 136              	.LVL15:
 224:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
 137              		.loc 1 224 28 view .LVU45
 138 006e 1032     		adds	r2, r2, #16
 139              	.LVL16:
 224:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
 140              		.loc 1 224 18 view .LVU46
 141 0070 1033     		adds	r3, r3, #16
 142              	.LVL17:
 143              	.L3:
 218:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
 144              		.loc 1 218 19 is_stmt 1 view .LVU47
 145 0072 0029     		cmp	r1, #0
 146 0074 DAD1     		bne	.L4
 228:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     }
 229:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 230:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* If the filter length is not a multiple of 4, compute the remaining filter taps */
 231:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps % 0x4U;
 147              		.loc 1 231 5 view .LVU48
 148              		.loc 1 231 12 is_stmt 0 view .LVU49
 149 0076 09F00301 		and	r1, r9, #3
 150              	.LVL18:
 232:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 233:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     while (tapCnt > 0U)
 151              		.loc 1 233 5 is_stmt 1 view .LVU50
 231:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 152              		.loc 1 231 12 is_stmt 0 view .LVU51
 153 007a 0F46     		mov	r7, r1
 154              		.loc 1 233 11 view .LVU52
 155 007c 08E0     		b	.L5
 156              	.LVL19:
 157              	.L6:
 234:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
 235:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 236:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
 158              		.loc 1 236 7 is_stmt 1 view .LVU53
 159              		.loc 1 236 15 is_stmt 0 view .LVU54
 160 007e B3EC017A 		vldmia.32	r3!, {s14}
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccHrJEMS.s 			page 8


 161              	.LVL20:
 162              		.loc 1 236 25 view .LVU55
 163 0082 B2EC016A 		vldmia.32	r2!, {s12}
 164              	.LVL21:
 165              		.loc 1 236 22 view .LVU56
 166 0086 27EE067A 		vmul.f32	s14, s14, s12
 167              		.loc 1 236 11 view .LVU57
 168 008a 77EE877A 		vadd.f32	s15, s15, s14
 169              	.LVL22:
 237:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 238:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 239:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 170              		.loc 1 239 7 is_stmt 1 view .LVU58
 171              		.loc 1 239 13 is_stmt 0 view .LVU59
 172 008e 013F     		subs	r7, r7, #1
 173              	.LVL23:
 174              	.L5:
 233:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
 175              		.loc 1 233 19 is_stmt 1 view .LVU60
 176 0090 002F     		cmp	r7, #0
 177 0092 F4D1     		bne	.L6
 240:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     }
 241:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 242:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* The result in the accumulator, store in the destination buffer. */
 243:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pOut++ = sum;
 178              		.loc 1 243 5 view .LVU61
 179              	.LVL24:
 180              		.loc 1 243 13 is_stmt 0 view .LVU62
 181 0094 E5EC017A 		vstmia.32	r5!, {s15}
 182              	.LVL25:
 244:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 245:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Compute and store error */
 246:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     d = (float32_t) (*pRef++);
 183              		.loc 1 246 5 is_stmt 1 view .LVU63
 184              		.loc 1 246 7 is_stmt 0 view .LVU64
 185 0098 B6EC017A 		vldmia.32	r6!, {s14}
 186              	.LVL26:
 247:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     e = d - sum;
 187              		.loc 1 247 5 is_stmt 1 view .LVU65
 188              		.loc 1 247 7 is_stmt 0 view .LVU66
 189 009c 77EE677A 		vsub.f32	s15, s14, s15
 190              	.LVL27:
 248:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pErr++ = e;
 191              		.loc 1 248 5 is_stmt 1 view .LVU67
 192              		.loc 1 248 10 is_stmt 0 view .LVU68
 193 00a0 099F     		ldr	r7, [sp, #36]
 194              	.LVL28:
 195              		.loc 1 248 13 view .LVU69
 196 00a2 E7EC017A 		vstmia.32	r7!, {s15}
 197              	.LVL29:
 249:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 250:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Calculation of Weighting factor for the updating filter coefficients */
 251:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     w = e * mu;
 198              		.loc 1 251 5 is_stmt 1 view .LVU70
 199              		.loc 1 251 7 is_stmt 0 view .LVU71
 200 00a6 66EEA77A 		vmul.f32	s15, s13, s15
 201              	.LVL30:
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccHrJEMS.s 			page 9


 252:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 253:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Initialize pState pointer */
 254:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     px = pState;
 202              		.loc 1 254 5 is_stmt 1 view .LVU72
 255:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 256:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Initialize coeff pointer */
 257:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     pb = (pCoeffs);
 203              		.loc 1 257 5 view .LVU73
 258:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 259:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Loop unrolling.  Process 4 taps at a time. */
 260:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps >> 2;
 204              		.loc 1 260 5 view .LVU74
 261:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 262:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Update filter coefficients */
 263:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     while (tapCnt > 0U)
 205              		.loc 1 263 5 view .LVU75
 257:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 206              		.loc 1 257 8 is_stmt 0 view .LVU76
 207 00aa 5B46     		mov	r3, fp
 254:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 208              		.loc 1 254 8 view .LVU77
 209 00ac 0246     		mov	r2, r0
 210              		.loc 1 263 11 view .LVU78
 211 00ae 2AE0     		b	.L7
 212              	.LVL31:
 213              	.L8:
 264:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
 265:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 266:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       *pb = *pb + (w * (*px++));
 214              		.loc 1 266 7 is_stmt 1 view .LVU79
 215              		.loc 1 266 13 is_stmt 0 view .LVU80
 216 00b0 93ED007A 		vldr.32	s14, [r3]
 217              	.LVL32:
 218              		.loc 1 266 25 view .LVU81
 219 00b4 92ED006A 		vldr.32	s12, [r2]
 220              		.loc 1 266 22 view .LVU82
 221 00b8 26EE276A 		vmul.f32	s12, s12, s15
 222              		.loc 1 266 17 view .LVU83
 223 00bc 37EE067A 		vadd.f32	s14, s14, s12
 224              		.loc 1 266 11 view .LVU84
 225 00c0 83ED007A 		vstr.32	s14, [r3]
 267:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       pb++;
 226              		.loc 1 267 7 is_stmt 1 view .LVU85
 227              	.LVL33:
 268:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 269:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       *pb = *pb + (w * (*px++));
 228              		.loc 1 269 7 view .LVU86
 229              		.loc 1 269 13 is_stmt 0 view .LVU87
 230 00c4 93ED017A 		vldr.32	s14, [r3, #4]
 231              	.LVL34:
 232              		.loc 1 269 25 view .LVU88
 233 00c8 92ED016A 		vldr.32	s12, [r2, #4]
 234              		.loc 1 269 22 view .LVU89
 235 00cc 26EE276A 		vmul.f32	s12, s12, s15
 236              		.loc 1 269 17 view .LVU90
 237 00d0 37EE067A 		vadd.f32	s14, s14, s12
 238              		.loc 1 269 11 view .LVU91
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccHrJEMS.s 			page 10


 239 00d4 83ED017A 		vstr.32	s14, [r3, #4]
 270:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       pb++;
 240              		.loc 1 270 7 is_stmt 1 view .LVU92
 241              	.LVL35:
 271:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 272:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       *pb = *pb + (w * (*px++));
 242              		.loc 1 272 7 view .LVU93
 243              		.loc 1 272 13 is_stmt 0 view .LVU94
 244 00d8 93ED027A 		vldr.32	s14, [r3, #8]
 245              	.LVL36:
 246              		.loc 1 272 25 view .LVU95
 247 00dc 92ED026A 		vldr.32	s12, [r2, #8]
 248              		.loc 1 272 22 view .LVU96
 249 00e0 26EE276A 		vmul.f32	s12, s12, s15
 250              		.loc 1 272 17 view .LVU97
 251 00e4 37EE067A 		vadd.f32	s14, s14, s12
 252              		.loc 1 272 11 view .LVU98
 253 00e8 83ED027A 		vstr.32	s14, [r3, #8]
 273:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       pb++;
 254              		.loc 1 273 7 is_stmt 1 view .LVU99
 255              	.LVL37:
 274:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 275:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       *pb = *pb + (w * (*px++));
 256              		.loc 1 275 7 view .LVU100
 257              		.loc 1 275 13 is_stmt 0 view .LVU101
 258 00ec 93ED037A 		vldr.32	s14, [r3, #12]
 259              	.LVL38:
 260              		.loc 1 275 25 view .LVU102
 261 00f0 92ED036A 		vldr.32	s12, [r2, #12]
 262              		.loc 1 275 22 view .LVU103
 263 00f4 26EE276A 		vmul.f32	s12, s12, s15
 264              		.loc 1 275 17 view .LVU104
 265 00f8 37EE067A 		vadd.f32	s14, s14, s12
 266              		.loc 1 275 11 view .LVU105
 267 00fc 83ED037A 		vstr.32	s14, [r3, #12]
 276:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       pb++;
 268              		.loc 1 276 7 is_stmt 1 view .LVU106
 269              		.loc 1 276 9 is_stmt 0 view .LVU107
 270 0100 1033     		adds	r3, r3, #16
 271              	.LVL39:
 277:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 278:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 279:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 272              		.loc 1 279 7 is_stmt 1 view .LVU108
 273              		.loc 1 279 13 is_stmt 0 view .LVU109
 274 0102 013C     		subs	r4, r4, #1
 275              	.LVL40:
 275:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       pb++;
 276              		.loc 1 275 28 view .LVU110
 277 0104 1032     		adds	r2, r2, #16
 278              	.LVL41:
 279              	.L7:
 263:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
 280              		.loc 1 263 19 is_stmt 1 view .LVU111
 281 0106 002C     		cmp	r4, #0
 282 0108 D2D1     		bne	.L8
 263:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccHrJEMS.s 			page 11


 283              		.loc 1 263 19 is_stmt 0 view .LVU112
 284 010a 0AE0     		b	.L9
 285              	.LVL42:
 286              	.L10:
 280:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     }
 281:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 282:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* If the filter length is not a multiple of 4, compute the remaining filter taps */
 283:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps % 0x4U;
 284:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 285:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     while (tapCnt > 0U)
 286:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
 287:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 288:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       *pb = *pb + (w * (*px++));
 287              		.loc 1 288 7 is_stmt 1 view .LVU113
 288              		.loc 1 288 13 is_stmt 0 view .LVU114
 289 010c 93ED007A 		vldr.32	s14, [r3]
 290              	.LVL43:
 291              		.loc 1 288 25 view .LVU115
 292 0110 B2EC016A 		vldmia.32	r2!, {s12}
 293              	.LVL44:
 294              		.loc 1 288 22 view .LVU116
 295 0114 26EE276A 		vmul.f32	s12, s12, s15
 296              		.loc 1 288 17 view .LVU117
 297 0118 37EE067A 		vadd.f32	s14, s14, s12
 298              		.loc 1 288 11 view .LVU118
 299 011c A3EC017A 		vstmia.32	r3!, {s14}
 300              	.LVL45:
 289:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       pb++;
 301              		.loc 1 289 7 is_stmt 1 view .LVU119
 290:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 291:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 292:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 302              		.loc 1 292 7 view .LVU120
 303              		.loc 1 292 13 is_stmt 0 view .LVU121
 304 0120 0139     		subs	r1, r1, #1
 305              	.LVL46:
 306              	.L9:
 285:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
 307              		.loc 1 285 19 is_stmt 1 view .LVU122
 308 0122 0029     		cmp	r1, #0
 309 0124 F2D1     		bne	.L10
 293:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     }
 294:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 295:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Advance state pointer by 1 for the next sample */
 296:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     pState = pState + 1;
 310              		.loc 1 296 5 view .LVU123
 311              		.loc 1 296 12 is_stmt 0 view .LVU124
 312 0126 0430     		adds	r0, r0, #4
 313              	.LVL47:
 297:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 298:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Decrement the loop counter */
 299:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     blkCnt--;
 314              		.loc 1 299 5 is_stmt 1 view .LVU125
 315              		.loc 1 299 11 is_stmt 0 view .LVU126
 316 0128 0AF1FF3A 		add	r10, r10, #-1
 317              	.LVL48:
 248:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccHrJEMS.s 			page 12


 318              		.loc 1 248 10 view .LVU127
 319 012c 0997     		str	r7, [sp, #36]
 320              	.LVL49:
 321              	.L2:
 201:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   {
 322              		.loc 1 201 17 is_stmt 1 view .LVU128
 323 012e BAF1000F 		cmp	r10, #0
 324 0132 0BD0     		beq	.L17
 204:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 325              		.loc 1 204 5 view .LVU129
 326              	.LVL50:
 204:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 327              		.loc 1 204 22 is_stmt 0 view .LVU130
 328 0134 5EF8043B 		ldr	r3, [lr], #4	@ float
 329              	.LVL51:
 204:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 330              		.loc 1 204 20 view .LVU131
 331 0138 4CF8043B 		str	r3, [ip], #4	@ float
 332              	.LVL52:
 207:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 333              		.loc 1 207 5 is_stmt 1 view .LVU132
 210:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 334              		.loc 1 210 5 view .LVU133
 213:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 335              		.loc 1 213 5 view .LVU134
 216:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 336              		.loc 1 216 5 view .LVU135
 216:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 337              		.loc 1 216 12 is_stmt 0 view .LVU136
 338 013c 4FEA9904 		lsr	r4, r9, #2
 339              	.LVL53:
 218:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
 340              		.loc 1 218 5 is_stmt 1 view .LVU137
 216:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 341              		.loc 1 216 12 is_stmt 0 view .LVU138
 342 0140 2146     		mov	r1, r4
 210:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 343              		.loc 1 210 8 view .LVU139
 344 0142 5A46     		mov	r2, fp
 207:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 345              		.loc 1 207 8 view .LVU140
 346 0144 0346     		mov	r3, r0
 213:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 347              		.loc 1 213 9 view .LVU141
 348 0146 DFED117A 		vldr.32	s15, .L18
 218:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
 349              		.loc 1 218 11 view .LVU142
 350 014a 92E7     		b	.L3
 351              	.LVL54:
 352              	.L17:
 300:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   }
 301:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 302:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 303:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* Processing is complete. Now copy the last numTaps - 1 samples to the
 304:DSP/Source/FilteringFunctions/arm_lms_f32.c ****      satrt of the state buffer. This prepares the state buffer for the
 305:DSP/Source/FilteringFunctions/arm_lms_f32.c ****      next function call. */
 306:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccHrJEMS.s 			page 13


 307:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* Points to the start of the pState buffer */
 308:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   pStateCurnt = S->pState;
 353              		.loc 1 308 3 is_stmt 1 view .LVU143
 354              		.loc 1 308 15 is_stmt 0 view .LVU144
 355 014c D8F80430 		ldr	r3, [r8, #4]
 356              	.LVL55:
 309:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 310:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* Loop unrolling for (numTaps - 1U) samples copy */
 311:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   tapCnt = (numTaps - 1U) >> 2U;
 357              		.loc 1 311 3 is_stmt 1 view .LVU145
 358              		.loc 1 311 21 is_stmt 0 view .LVU146
 359 0150 09F1FF32 		add	r2, r9, #-1
 360              		.loc 1 311 10 view .LVU147
 361 0154 9108     		lsrs	r1, r2, #2
 362              	.LVL56:
 312:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 313:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* copy data */
 314:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   while (tapCnt > 0U)
 363              		.loc 1 314 3 is_stmt 1 view .LVU148
 364              		.loc 1 314 9 is_stmt 0 view .LVU149
 365 0156 0AE0     		b	.L12
 366              	.L13:
 315:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   {
 316:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 367              		.loc 1 316 5 is_stmt 1 view .LVU150
 368              	.LVL57:
 369              		.loc 1 316 22 is_stmt 0 view .LVU151
 370 0158 0468     		ldr	r4, [r0]	@ float
 371              		.loc 1 316 20 view .LVU152
 372 015a 1C60     		str	r4, [r3]	@ float
 317:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 373              		.loc 1 317 5 is_stmt 1 view .LVU153
 374              	.LVL58:
 375              		.loc 1 317 22 is_stmt 0 view .LVU154
 376 015c 4468     		ldr	r4, [r0, #4]	@ float
 377              		.loc 1 317 20 view .LVU155
 378 015e 5C60     		str	r4, [r3, #4]	@ float
 318:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 379              		.loc 1 318 5 is_stmt 1 view .LVU156
 380              	.LVL59:
 381              		.loc 1 318 22 is_stmt 0 view .LVU157
 382 0160 8468     		ldr	r4, [r0, #8]	@ float
 383              		.loc 1 318 20 view .LVU158
 384 0162 9C60     		str	r4, [r3, #8]	@ float
 319:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 385              		.loc 1 319 5 is_stmt 1 view .LVU159
 386              	.LVL60:
 387              		.loc 1 319 22 is_stmt 0 view .LVU160
 388 0164 C468     		ldr	r4, [r0, #12]	@ float
 389              		.loc 1 319 20 view .LVU161
 390 0166 DC60     		str	r4, [r3, #12]	@ float
 320:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 321:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Decrement the loop counter */
 322:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt--;
 391              		.loc 1 322 5 is_stmt 1 view .LVU162
 392              		.loc 1 322 11 is_stmt 0 view .LVU163
 393 0168 0139     		subs	r1, r1, #1
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccHrJEMS.s 			page 14


 394              	.LVL61:
 319:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 395              		.loc 1 319 17 view .LVU164
 396 016a 1033     		adds	r3, r3, #16
 397              	.LVL62:
 319:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 398              		.loc 1 319 29 view .LVU165
 399 016c 1030     		adds	r0, r0, #16
 400              	.LVL63:
 401              	.L12:
 314:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   {
 402              		.loc 1 314 17 is_stmt 1 view .LVU166
 403 016e 0029     		cmp	r1, #0
 404 0170 F2D1     		bne	.L13
 323:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   }
 324:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 325:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* Calculate remaining number of copies */
 326:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   tapCnt = (numTaps - 1U) % 0x4U;
 405              		.loc 1 326 3 view .LVU167
 406              		.loc 1 326 10 is_stmt 0 view .LVU168
 407 0172 02F00302 		and	r2, r2, #3
 408              	.LVL64:
 327:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 328:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* Copy the remaining q31_t data */
 329:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   while (tapCnt > 0U)
 409              		.loc 1 329 3 is_stmt 1 view .LVU169
 410              		.loc 1 329 9 is_stmt 0 view .LVU170
 411 0176 04E0     		b	.L14
 412              	.L15:
 330:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   {
 331:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 413              		.loc 1 331 5 is_stmt 1 view .LVU171
 414              	.LVL65:
 415              		.loc 1 331 22 is_stmt 0 view .LVU172
 416 0178 50F8041B 		ldr	r1, [r0], #4	@ float
 417              	.LVL66:
 418              		.loc 1 331 20 view .LVU173
 419 017c 43F8041B 		str	r1, [r3], #4	@ float
 420              	.LVL67:
 332:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 333:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Decrement the loop counter */
 334:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt--;
 421              		.loc 1 334 5 is_stmt 1 view .LVU174
 422              		.loc 1 334 11 is_stmt 0 view .LVU175
 423 0180 013A     		subs	r2, r2, #1
 424              	.LVL68:
 425              	.L14:
 329:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   {
 426              		.loc 1 329 17 is_stmt 1 view .LVU176
 427 0182 002A     		cmp	r2, #0
 428 0184 F8D1     		bne	.L15
 335:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   }
 336:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 337:DSP/Source/FilteringFunctions/arm_lms_f32.c **** #else
 338:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 339:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* Run the below code for Cortex-M0 */
 340:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccHrJEMS.s 			page 15


 341:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   while (blkCnt > 0U)
 342:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   {
 343:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Copy the new input sample into the state buffer */
 344:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pSrc++;
 345:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 346:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Initialize pState pointer */
 347:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     px = pState;
 348:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 349:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Initialize pCoeffs pointer */
 350:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     pb = pCoeffs;
 351:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 352:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Set the accumulator to zero */
 353:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     sum = 0.0f;
 354:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 355:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Loop over numTaps number of values */
 356:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps;
 357:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 358:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     while (tapCnt > 0U)
 359:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
 360:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 361:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
 362:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 363:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 364:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 365:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     }
 366:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 367:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* The result is stored in the destination buffer. */
 368:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pOut++ = sum;
 369:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 370:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Compute and store error */
 371:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     d = (float32_t) (*pRef++);
 372:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     e = d - sum;
 373:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pErr++ = e;
 374:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 375:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Weighting factor for the LMS version */
 376:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     w = e * mu;
 377:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 378:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Initialize pState pointer */
 379:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     px = pState;
 380:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 381:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Initialize pCoeffs pointer */
 382:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     pb = pCoeffs;
 383:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 384:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Loop over numTaps number of values */
 385:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps;
 386:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 387:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     while (tapCnt > 0U)
 388:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
 389:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 390:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       *pb = *pb + (w * (*px++));
 391:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       pb++;
 392:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 393:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 394:DSP/Source/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 395:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     }
 396:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 397:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Advance state pointer by 1 for the next sample */
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccHrJEMS.s 			page 16


 398:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     pState = pState + 1;
 399:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 400:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Decrement the loop counter */
 401:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     blkCnt--;
 402:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   }
 403:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 404:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 405:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* Processing is complete. Now copy the last numTaps - 1 samples to the
 406:DSP/Source/FilteringFunctions/arm_lms_f32.c ****    * start of the state buffer. This prepares the state buffer for the
 407:DSP/Source/FilteringFunctions/arm_lms_f32.c ****    * next function call. */
 408:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 409:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* Points to the start of the pState buffer */
 410:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   pStateCurnt = S->pState;
 411:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 412:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /*  Copy (numTaps - 1U) samples  */
 413:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   tapCnt = (numTaps - 1U);
 414:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 415:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* Copy the data */
 416:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   while (tapCnt > 0U)
 417:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   {
 418:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 419:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 420:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Decrement the loop counter */
 421:DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt--;
 422:DSP/Source/FilteringFunctions/arm_lms_f32.c ****   }
 423:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 424:DSP/Source/FilteringFunctions/arm_lms_f32.c **** #endif /*   #if defined (ARM_MATH_DSP) */
 425:DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 426:DSP/Source/FilteringFunctions/arm_lms_f32.c **** }
 429              		.loc 1 426 1 is_stmt 0 view .LVU177
 430 0186 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 431              	.LVL69:
 432              	.L19:
 433              		.loc 1 426 1 view .LVU178
 434 018a 00BF     		.align	2
 435              	.L18:
 436 018c 00000000 		.word	0
 437              		.cfi_endproc
 438              	.LFE139:
 440              		.text
 441              	.Letext0:
 442              		.file 2 "/Users/luban/.local/xPacks/arm-none-eabi-gcc/xpack-arm-none-eabi-gcc-13.2.1-1.1/arm-none-
 443              		.file 3 "/Users/luban/.local/xPacks/arm-none-eabi-gcc/xpack-arm-none-eabi-gcc-13.2.1-1.1/arm-none-
 444              		.file 4 "DSP/Inc/arm_math.h"
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccHrJEMS.s 			page 17


DEFINED SYMBOLS
                            *ABS*:00000000 arm_lms_f32.c
/var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccHrJEMS.s:21     .text.arm_lms_f32:00000000 $t
/var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccHrJEMS.s:27     .text.arm_lms_f32:00000000 arm_lms_f32
/var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccHrJEMS.s:436    .text.arm_lms_f32:0000018c $d

NO UNDEFINED SYMBOLS
