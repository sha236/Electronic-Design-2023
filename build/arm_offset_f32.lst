ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccM8kZ2G.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"arm_offset_f32.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "DSP/Source/BasicMathFunctions/arm_offset_f32.c"
  20              		.section	.text.arm_offset_f32,"ax",%progbits
  21              		.align	1
  22              		.global	arm_offset_f32
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	arm_offset_f32:
  28              	.LVL0:
  29              	.LFB139:
   1:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** /* ----------------------------------------------------------------------
   2:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * Project:      CMSIS DSP Library
   3:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * Title:        arm_offset_f32.c
   4:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * Description:  Floating-point vector offset
   5:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  *
   6:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * $Date:        27. January 2017
   7:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * $Revision:    V.1.5.1
   8:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  *
   9:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * Target Processor: Cortex-M cores
  10:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * -------------------------------------------------------------------- */
  11:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** /*
  12:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  *
  14:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  *
  16:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * not use this file except in compliance with the License.
  18:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * You may obtain a copy of the License at
  19:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  *
  20:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  *
  22:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * See the License for the specific language governing permissions and
  26:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * limitations under the License.
  27:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  */
  28:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
  29:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** #include "arm_math.h"
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccM8kZ2G.s 			page 2


  30:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
  31:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** /**
  32:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * @ingroup groupMath
  33:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  */
  34:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
  35:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** /**
  36:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * @defgroup offset Vector Offset
  37:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  *
  38:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * Adds a constant offset to each element of a vector.
  39:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  *
  40:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * <pre>
  41:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  *     pDst[n] = pSrc[n] + offset,   0 <= n < blockSize.
  42:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * </pre>
  43:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  *
  44:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * The functions support in-place computation allowing the source and
  45:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * destination pointers to reference the same memory buffer.
  46:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * There are separate functions for floating-point, Q7, Q15, and Q31 data types.
  47:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  */
  48:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
  49:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** /**
  50:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * @addtogroup offset
  51:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * @{
  52:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  */
  53:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
  54:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** /**
  55:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * @brief  Adds a constant offset to a floating-point vector.
  56:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * @param[in]  *pSrc points to the input vector
  57:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * @param[in]  offset is the offset to be added
  58:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * @param[out]  *pDst points to the output vector
  59:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * @param[in]  blockSize number of samples in the vector
  60:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  * @return none.
  61:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****  */
  62:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
  63:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
  64:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** void arm_offset_f32(
  65:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****   float32_t * pSrc,
  66:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****   float32_t offset,
  67:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****   float32_t * pDst,
  68:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****   uint32_t blockSize)
  69:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** {
  30              		.loc 1 69 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  70:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****   uint32_t blkCnt;                               /* loop counter */
  35              		.loc 1 70 3 view .LVU1
  71:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
  72:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** #if defined (ARM_MATH_DSP)
  73:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
  74:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  75:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****   float32_t in1, in2, in3, in4;
  36              		.loc 1 75 3 view .LVU2
  76:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
  77:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****   /*loop Unrolling */
  78:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****   blkCnt = blockSize >> 2U;
  37              		.loc 1 78 3 view .LVU3
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccM8kZ2G.s 			page 3


  38              		.loc 1 78 10 is_stmt 0 view .LVU4
  39 0000 9308     		lsrs	r3, r2, #2
  40              	.LVL1:
  79:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
  80:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  81:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  82:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****   while (blkCnt > 0U)
  41              		.loc 1 82 3 is_stmt 1 view .LVU5
  42              		.loc 1 82 9 is_stmt 0 view .LVU6
  43 0002 1AE0     		b	.L2
  44              	.L3:
  83:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****   {
  84:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     /* C = A + offset */
  85:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     /* Add offset and then store the results in the destination buffer. */
  86:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     /* read samples from source */
  87:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     in1 = *pSrc;
  45              		.loc 1 87 5 is_stmt 1 view .LVU7
  46              		.loc 1 87 9 is_stmt 0 view .LVU8
  47 0004 90ED006A 		vldr.32	s12, [r0]
  48              	.LVL2:
  88:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     in2 = *(pSrc + 1);
  49              		.loc 1 88 5 is_stmt 1 view .LVU9
  50              		.loc 1 88 9 is_stmt 0 view .LVU10
  51 0008 D0ED016A 		vldr.32	s13, [r0, #4]
  52              	.LVL3:
  89:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
  90:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     /* add offset to input */
  91:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     in1 = in1 + offset;
  53              		.loc 1 91 5 is_stmt 1 view .LVU11
  54              		.loc 1 91 9 is_stmt 0 view .LVU12
  55 000c 30EE066A 		vadd.f32	s12, s0, s12
  56              	.LVL4:
  92:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
  93:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     /* read samples from source */
  94:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     in3 = *(pSrc + 2);
  57              		.loc 1 94 5 is_stmt 1 view .LVU13
  58              		.loc 1 94 9 is_stmt 0 view .LVU14
  59 0010 90ED027A 		vldr.32	s14, [r0, #8]
  60              	.LVL5:
  95:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
  96:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     /* add offset to input */
  97:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     in2 = in2 + offset;
  61              		.loc 1 97 5 is_stmt 1 view .LVU15
  62              		.loc 1 97 9 is_stmt 0 view .LVU16
  63 0014 70EE266A 		vadd.f32	s13, s0, s13
  64              	.LVL6:
  98:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
  99:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     /* read samples from source */
 100:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     in4 = *(pSrc + 3);
  65              		.loc 1 100 5 is_stmt 1 view .LVU17
  66              		.loc 1 100 9 is_stmt 0 view .LVU18
  67 0018 D0ED037A 		vldr.32	s15, [r0, #12]
  68              	.LVL7:
 101:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
 102:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     /* add offset to input */
 103:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     in3 = in3 + offset;
  69              		.loc 1 103 5 is_stmt 1 view .LVU19
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccM8kZ2G.s 			page 4


  70              		.loc 1 103 9 is_stmt 0 view .LVU20
  71 001c 30EE077A 		vadd.f32	s14, s0, s14
  72              	.LVL8:
 104:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
 105:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     /* store result to destination */
 106:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     *pDst = in1;
  73              		.loc 1 106 5 is_stmt 1 view .LVU21
  74              		.loc 1 106 11 is_stmt 0 view .LVU22
  75 0020 81ED006A 		vstr.32	s12, [r1]
 107:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
 108:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     /* add offset to input */
 109:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     in4 = in4 + offset;
  76              		.loc 1 109 5 is_stmt 1 view .LVU23
  77              		.loc 1 109 9 is_stmt 0 view .LVU24
  78 0024 70EE277A 		vadd.f32	s15, s0, s15
  79              	.LVL9:
 110:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
 111:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     /* store result to destination */
 112:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     *(pDst + 1) = in2;
  80              		.loc 1 112 5 is_stmt 1 view .LVU25
  81              		.loc 1 112 17 is_stmt 0 view .LVU26
  82 0028 C1ED016A 		vstr.32	s13, [r1, #4]
 113:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
 114:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     /* store result to destination */
 115:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     *(pDst + 2) = in3;
  83              		.loc 1 115 5 is_stmt 1 view .LVU27
  84              		.loc 1 115 17 is_stmt 0 view .LVU28
  85 002c 81ED027A 		vstr.32	s14, [r1, #8]
 116:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
 117:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     /* store result to destination */
 118:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     *(pDst + 3) = in4;
  86              		.loc 1 118 5 is_stmt 1 view .LVU29
  87              		.loc 1 118 17 is_stmt 0 view .LVU30
  88 0030 C1ED037A 		vstr.32	s15, [r1, #12]
 119:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
 120:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     /* update pointers to process next samples */
 121:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     pSrc += 4U;
  89              		.loc 1 121 5 is_stmt 1 view .LVU31
  90              		.loc 1 121 10 is_stmt 0 view .LVU32
  91 0034 1030     		adds	r0, r0, #16
  92              	.LVL10:
 122:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     pDst += 4U;
  93              		.loc 1 122 5 is_stmt 1 view .LVU33
  94              		.loc 1 122 10 is_stmt 0 view .LVU34
  95 0036 1031     		adds	r1, r1, #16
  96              	.LVL11:
 123:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
 124:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     /* Decrement the loop counter */
 125:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     blkCnt--;
  97              		.loc 1 125 5 is_stmt 1 view .LVU35
  98              		.loc 1 125 11 is_stmt 0 view .LVU36
  99 0038 013B     		subs	r3, r3, #1
 100              	.LVL12:
 101              	.L2:
  82:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****   {
 102              		.loc 1 82 17 is_stmt 1 view .LVU37
 103 003a 002B     		cmp	r3, #0
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccM8kZ2G.s 			page 5


 104 003c E2D1     		bne	.L3
 126:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****   }
 127:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
 128:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 129:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****    ** No loop unrolling is used. */
 130:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****   blkCnt = blockSize % 0x4U;
 105              		.loc 1 130 3 view .LVU38
 106              		.loc 1 130 10 is_stmt 0 view .LVU39
 107 003e 02F00302 		and	r2, r2, #3
 108              	.LVL13:
 131:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
 132:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** #else
 133:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
 134:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****   /* Run the below code for Cortex-M0 */
 135:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
 136:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****   /* Initialize blkCnt with number of samples */
 137:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****   blkCnt = blockSize;
 138:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
 139:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** #endif /* #if defined (ARM_MATH_DSP) */
 140:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
 141:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****   while (blkCnt > 0U)
 109              		.loc 1 141 3 is_stmt 1 view .LVU40
 110              		.loc 1 141 9 is_stmt 0 view .LVU41
 111 0042 06E0     		b	.L4
 112              	.L5:
 142:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****   {
 143:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     /* C = A + offset */
 144:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     /* Add offset and then store the result in the destination buffer. */
 145:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     *pDst++ = (*pSrc++) + offset;
 113              		.loc 1 145 5 is_stmt 1 view .LVU42
 114              	.LVL14:
 115              		.loc 1 145 16 is_stmt 0 view .LVU43
 116 0044 F0EC017A 		vldmia.32	r0!, {s15}
 117              	.LVL15:
 118              		.loc 1 145 25 view .LVU44
 119 0048 77EE807A 		vadd.f32	s15, s15, s0
 120              		.loc 1 145 13 view .LVU45
 121 004c E1EC017A 		vstmia.32	r1!, {s15}
 122              	.LVL16:
 146:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** 
 147:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     /* Decrement the loop counter */
 148:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****     blkCnt--;
 123              		.loc 1 148 5 is_stmt 1 view .LVU46
 124              		.loc 1 148 11 is_stmt 0 view .LVU47
 125 0050 013A     		subs	r2, r2, #1
 126              	.LVL17:
 127              	.L4:
 141:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****   {
 128              		.loc 1 141 17 is_stmt 1 view .LVU48
 129 0052 002A     		cmp	r2, #0
 130 0054 F6D1     		bne	.L5
 149:DSP/Source/BasicMathFunctions/arm_offset_f32.c ****   }
 150:DSP/Source/BasicMathFunctions/arm_offset_f32.c **** }
 131              		.loc 1 150 1 is_stmt 0 view .LVU49
 132 0056 7047     		bx	lr
 133              		.cfi_endproc
 134              	.LFE139:
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccM8kZ2G.s 			page 6


 136              		.text
 137              	.Letext0:
 138              		.file 2 "/Users/luban/.local/xPacks/arm-none-eabi-gcc/xpack-arm-none-eabi-gcc-13.2.1-1.1/arm-none-
 139              		.file 3 "/Users/luban/.local/xPacks/arm-none-eabi-gcc/xpack-arm-none-eabi-gcc-13.2.1-1.1/arm-none-
 140              		.file 4 "DSP/Inc/arm_math.h"
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccM8kZ2G.s 			page 7


DEFINED SYMBOLS
                            *ABS*:00000000 arm_offset_f32.c
/var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccM8kZ2G.s:21     .text.arm_offset_f32:00000000 $t
/var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccM8kZ2G.s:27     .text.arm_offset_f32:00000000 arm_offset_f32

NO UNDEFINED SYMBOLS
