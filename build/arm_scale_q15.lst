ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccYgX0oi.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"arm_scale_q15.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "DSP/Source/BasicMathFunctions/arm_scale_q15.c"
  20              		.section	.text.arm_scale_q15,"ax",%progbits
  21              		.align	1
  22              		.global	arm_scale_q15
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	arm_scale_q15:
  28              	.LVL0:
  29              	.LFB139:
   1:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** /* ----------------------------------------------------------------------
   2:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * Project:      CMSIS DSP Library
   3:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * Title:        arm_scale_q15.c
   4:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * Description:  Multiplies a Q15 vector by a scalar
   5:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  *
   6:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * $Date:        27. January 2017
   7:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * $Revision:    V.1.5.1
   8:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  *
   9:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * Target Processor: Cortex-M cores
  10:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * -------------------------------------------------------------------- */
  11:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** /*
  12:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  *
  14:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  *
  16:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * not use this file except in compliance with the License.
  18:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * You may obtain a copy of the License at
  19:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  *
  20:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  *
  22:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * See the License for the specific language governing permissions and
  26:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * limitations under the License.
  27:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  */
  28:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
  29:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** #include "arm_math.h"
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccYgX0oi.s 			page 2


  30:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
  31:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** /**
  32:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * @ingroup groupMath
  33:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  */
  34:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
  35:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** /**
  36:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * @addtogroup scale
  37:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * @{
  38:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  */
  39:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
  40:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** /**
  41:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * @brief Multiplies a Q15 vector by a scalar.
  42:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * @param[in]       *pSrc points to the input vector
  43:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * @param[in]       scaleFract fractional portion of the scale value
  44:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * @param[in]       shift number of bits to shift the result by
  45:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * @param[out]      *pDst points to the output vector
  46:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * @param[in]       blockSize number of samples in the vector
  47:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * @return none.
  48:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  *
  49:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * <b>Scaling and Overflow Behavior:</b>
  50:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * \par
  51:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * The input data <code>*pSrc</code> and <code>scaleFract</code> are in 1.15 format.
  52:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  * These are multiplied to yield a 2.30 intermediate result and this is shifted with saturation to 
  53:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****  */
  54:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
  55:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
  56:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** void arm_scale_q15(
  57:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   q15_t * pSrc,
  58:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   q15_t scaleFract,
  59:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   int8_t shift,
  60:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   q15_t * pDst,
  61:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   uint32_t blockSize)
  62:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** {
  30              		.loc 1 62 1 view -0
  31              		.cfi_startproc
  32              		@ args = 4, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 62 1 is_stmt 0 view .LVU1
  35 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 20
  38              		.cfi_offset 4, -20
  39              		.cfi_offset 5, -16
  40              		.cfi_offset 6, -12
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 059C     		ldr	r4, [sp, #20]
  63:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   int8_t kShift = 15 - shift;                    /* shift to apply after scaling */
  44              		.loc 1 63 3 is_stmt 1 view .LVU2
  45              		.loc 1 63 22 is_stmt 0 view .LVU3
  46 0004 C2F10F02 		rsb	r2, r2, #15
  47              	.LVL1:
  48              		.loc 1 63 10 view .LVU4
  49 0008 4FFA82FC 		sxtb	ip, r2
  50              	.LVL2:
  64:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   uint32_t blkCnt;                               /* loop counter */
  51              		.loc 1 64 3 is_stmt 1 view .LVU5
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccYgX0oi.s 			page 3


  65:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
  66:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** #if defined (ARM_MATH_DSP)
  67:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
  68:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  69:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   q15_t in1, in2, in3, in4;
  52              		.loc 1 69 3 view .LVU6
  70:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   q31_t inA1, inA2;                              /* Temporary variables */
  53              		.loc 1 70 3 view .LVU7
  71:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   q31_t out1, out2, out3, out4;
  54              		.loc 1 71 3 view .LVU8
  72:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
  73:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
  74:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   /*loop Unrolling */
  75:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   blkCnt = blockSize >> 2U;
  55              		.loc 1 75 3 view .LVU9
  56              		.loc 1 75 10 is_stmt 0 view .LVU10
  57 000c A508     		lsrs	r5, r4, #2
  58              	.LVL3:
  76:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
  77:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  78:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  79:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   while (blkCnt > 0U)
  59              		.loc 1 79 3 is_stmt 1 view .LVU11
  60              		.loc 1 79 9 is_stmt 0 view .LVU12
  61 000e 2EE0     		b	.L2
  62              	.L3:
  80:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   {
  81:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     /* Reading 2 inputs from memory */
  82:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     inA1 = *__SIMD32(pSrc)++;
  63              		.loc 1 82 5 is_stmt 1 view .LVU13
  64              	.LVL4:
  65              		.loc 1 82 10 is_stmt 0 view .LVU14
  66 0010 8646     		mov	lr, r0
  67 0012 5EF8082B 		ldr	r2, [lr], #8
  68              	.LVL5:
  83:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     inA2 = *__SIMD32(pSrc)++;
  69              		.loc 1 83 5 is_stmt 1 view .LVU15
  70              		.loc 1 83 10 is_stmt 0 view .LVU16
  71 0016 4068     		ldr	r0, [r0, #4]
  72              	.LVL6:
  84:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
  85:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     /* C = A * scale */
  86:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     /* Scale the inputs and then store the 2 results in the destination buffer
  87:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****      * in single cycle by packing the outputs */
  88:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     out1 = (q31_t) ((q15_t) (inA1 >> 16) * scaleFract);
  73              		.loc 1 88 5 is_stmt 1 view .LVU17
  74              		.loc 1 88 21 is_stmt 0 view .LVU18
  75 0018 1714     		asrs	r7, r2, #16
  76              		.loc 1 88 10 view .LVU19
  77 001a 01FB07F7 		mul	r7, r1, r7
  78              	.LVL7:
  89:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     out2 = (q31_t) ((q15_t) inA1 * scaleFract);
  79              		.loc 1 89 5 is_stmt 1 view .LVU20
  80              		.loc 1 89 21 is_stmt 0 view .LVU21
  81 001e 12B2     		sxth	r2, r2
  82              	.LVL8:
  83              		.loc 1 89 10 view .LVU22
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccYgX0oi.s 			page 4


  84 0020 01FB02F2 		mul	r2, r1, r2
  85              	.LVL9:
  90:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     out3 = (q31_t) ((q15_t) (inA2 >> 16) * scaleFract);
  86              		.loc 1 90 5 is_stmt 1 view .LVU23
  87              		.loc 1 90 21 is_stmt 0 view .LVU24
  88 0024 0614     		asrs	r6, r0, #16
  89              		.loc 1 90 10 view .LVU25
  90 0026 01FB06F6 		mul	r6, r1, r6
  91              	.LVL10:
  91:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     out4 = (q31_t) ((q15_t) inA2 * scaleFract);
  92              		.loc 1 91 5 is_stmt 1 view .LVU26
  93              		.loc 1 91 21 is_stmt 0 view .LVU27
  94 002a 00B2     		sxth	r0, r0
  95              	.LVL11:
  96              		.loc 1 91 10 view .LVU28
  97 002c 01FB00F0 		mul	r0, r1, r0
  98              	.LVL12:
  92:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
  93:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     /* apply shifting */
  94:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     out1 = out1 >> kShift;
  99              		.loc 1 94 5 is_stmt 1 view .LVU29
 100              		.loc 1 94 10 is_stmt 0 view .LVU30
 101 0030 47FA0CF7 		asr	r7, r7, ip
 102              	.LVL13:
  95:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     out2 = out2 >> kShift;
 103              		.loc 1 95 5 is_stmt 1 view .LVU31
 104              		.loc 1 95 10 is_stmt 0 view .LVU32
 105 0034 42FA0CF2 		asr	r2, r2, ip
 106              	.LVL14:
  96:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     out3 = out3 >> kShift;
 107              		.loc 1 96 5 is_stmt 1 view .LVU33
 108              		.loc 1 96 10 is_stmt 0 view .LVU34
 109 0038 46FA0CF6 		asr	r6, r6, ip
 110              	.LVL15:
  97:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     out4 = out4 >> kShift;
 111              		.loc 1 97 5 is_stmt 1 view .LVU35
 112              		.loc 1 97 10 is_stmt 0 view .LVU36
 113 003c 40FA0CF0 		asr	r0, r0, ip
 114              	.LVL16:
  98:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
  99:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     /* saturate the output */
 100:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     in1 = (q15_t) (__SSAT(out1, 16));
 115              		.loc 1 100 5 is_stmt 1 view .LVU37
 116              	.LBB2:
 117              		.loc 1 100 20 view .LVU38
 118              		.loc 1 100 20 view .LVU39
 119              		.syntax unified
 120              	@ 100 "DSP/Source/BasicMathFunctions/arm_scale_q15.c" 1
 121 0040 07F30F07 		ssat r7, #16, r7
 122              	@ 0 "" 2
 123              	.LVL17:
 124              		.loc 1 100 20 view .LVU40
 125              		.thumb
 126              		.syntax unified
 127              	.LBE2:
 128              		.loc 1 100 9 is_stmt 0 view .LVU41
 129 0044 3FB2     		sxth	r7, r7
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccYgX0oi.s 			page 5


 130              	.LVL18:
 101:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     in2 = (q15_t) (__SSAT(out2, 16));
 131              		.loc 1 101 5 is_stmt 1 view .LVU42
 132              	.LBB3:
 133              		.loc 1 101 20 view .LVU43
 134              		.loc 1 101 20 view .LVU44
 135              		.syntax unified
 136              	@ 101 "DSP/Source/BasicMathFunctions/arm_scale_q15.c" 1
 137 0046 02F30F02 		ssat r2, #16, r2
 138              	@ 0 "" 2
 139              	.LVL19:
 140              		.loc 1 101 20 view .LVU45
 141              		.thumb
 142              		.syntax unified
 143              	.LBE3:
 144              		.loc 1 101 9 is_stmt 0 view .LVU46
 145 004a 12B2     		sxth	r2, r2
 146              	.LVL20:
 102:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     in3 = (q15_t) (__SSAT(out3, 16));
 147              		.loc 1 102 5 is_stmt 1 view .LVU47
 148              	.LBB4:
 149              		.loc 1 102 20 view .LVU48
 150              		.loc 1 102 20 view .LVU49
 151              		.syntax unified
 152              	@ 102 "DSP/Source/BasicMathFunctions/arm_scale_q15.c" 1
 153 004c 06F30F06 		ssat r6, #16, r6
 154              	@ 0 "" 2
 155              	.LVL21:
 156              		.loc 1 102 20 view .LVU50
 157              		.thumb
 158              		.syntax unified
 159              	.LBE4:
 160              		.loc 1 102 9 is_stmt 0 view .LVU51
 161 0050 36B2     		sxth	r6, r6
 162              	.LVL22:
 103:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     in4 = (q15_t) (__SSAT(out4, 16));
 163              		.loc 1 103 5 is_stmt 1 view .LVU52
 164              	.LBB5:
 165              		.loc 1 103 20 view .LVU53
 166              		.loc 1 103 20 view .LVU54
 167              		.syntax unified
 168              	@ 103 "DSP/Source/BasicMathFunctions/arm_scale_q15.c" 1
 169 0052 00F30F00 		ssat r0, #16, r0
 170              	@ 0 "" 2
 171              	.LVL23:
 172              		.loc 1 103 20 view .LVU55
 173              		.thumb
 174              		.syntax unified
 175              	.LBE5:
 176              		.loc 1 103 9 is_stmt 0 view .LVU56
 177 0056 00B2     		sxth	r0, r0
 178              	.LVL24:
 104:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
 105:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     /* store the result to destination */
 106:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     *__SIMD32(pDst)++ = __PKHBT(in2, in1, 16);
 179              		.loc 1 106 5 is_stmt 1 view .LVU57
 180              	.LBB6:
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccYgX0oi.s 			page 6


 181              		.loc 1 106 25 view .LVU58
 182              		.loc 1 106 25 view .LVU59
 183              		.syntax unified
 184              	@ 106 "DSP/Source/BasicMathFunctions/arm_scale_q15.c" 1
 185 0058 C2EA0742 		pkhbt r2, r2, r7, lsl #16
 186              	@ 0 "" 2
 187              	.LVL25:
 188              		.loc 1 106 25 view .LVU60
 189              		.loc 1 106 25 is_stmt 0 view .LVU61
 190              		.thumb
 191              		.syntax unified
 192              	.LBE6:
 193              		.loc 1 106 23 view .LVU62
 194 005c 1F46     		mov	r7, r3
 195              	.LVL26:
 196              		.loc 1 106 23 view .LVU63
 197 005e 47F8082B 		str	r2, [r7], #8
 198              	.LVL27:
 107:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     *__SIMD32(pDst)++ = __PKHBT(in4, in3, 16);
 199              		.loc 1 107 5 is_stmt 1 view .LVU64
 200              	.LBB7:
 201              		.loc 1 107 25 view .LVU65
 202              		.loc 1 107 25 view .LVU66
 203              		.syntax unified
 204              	@ 107 "DSP/Source/BasicMathFunctions/arm_scale_q15.c" 1
 205 0062 C0EA0640 		pkhbt r0, r0, r6, lsl #16
 206              	@ 0 "" 2
 207              	.LVL28:
 208              		.loc 1 107 25 view .LVU67
 209              		.loc 1 107 25 is_stmt 0 view .LVU68
 210              		.thumb
 211              		.syntax unified
 212              	.LBE7:
 213              		.loc 1 107 23 view .LVU69
 214 0066 5860     		str	r0, [r3, #4]
 108:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
 109:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     /* Decrement the loop counter */
 110:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     blkCnt--;
 215              		.loc 1 110 5 is_stmt 1 view .LVU70
 216              		.loc 1 110 11 is_stmt 0 view .LVU71
 217 0068 013D     		subs	r5, r5, #1
 218              	.LVL29:
 107:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     *__SIMD32(pDst)++ = __PKHBT(in4, in3, 16);
 219              		.loc 1 107 20 view .LVU72
 220 006a 3B46     		mov	r3, r7
  83:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
 221              		.loc 1 83 27 view .LVU73
 222 006c 7046     		mov	r0, lr
 223              	.LVL30:
 224              	.L2:
  79:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   {
 225              		.loc 1 79 17 is_stmt 1 view .LVU74
 226 006e 002D     		cmp	r5, #0
 227 0070 CED1     		bne	.L3
 111:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   }
 112:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
 113:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccYgX0oi.s 			page 7


 114:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****    ** No loop unrolling is used. */
 115:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   blkCnt = blockSize % 0x4U;
 228              		.loc 1 115 3 view .LVU75
 229              		.loc 1 115 10 is_stmt 0 view .LVU76
 230 0072 04F00304 		and	r4, r4, #3
 231              	.LVL31:
 116:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
 117:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   while (blkCnt > 0U)
 232              		.loc 1 117 3 is_stmt 1 view .LVU77
 233              		.loc 1 117 9 is_stmt 0 view .LVU78
 234 0076 0AE0     		b	.L4
 235              	.L5:
 118:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   {
 119:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     /* C = A * scale */
 120:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     /* Scale the input and then store the result in the destination buffer. */
 121:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     *pDst++ = (q15_t) (__SSAT(((*pSrc++) * scaleFract) >> kShift, 16));
 236              		.loc 1 121 5 is_stmt 1 view .LVU79
 237              	.LBB8:
 238              		.loc 1 121 24 view .LVU80
 239              	.LVL32:
 240              		.loc 1 121 24 is_stmt 0 view .LVU81
 241 0078 30F9022B 		ldrsh	r2, [r0], #2
 242              	.LVL33:
 243              		.loc 1 121 24 view .LVU82
 244 007c 01FB02F2 		mul	r2, r1, r2
 245 0080 42FA0CF2 		asr	r2, r2, ip
 246              	.LVL34:
 247              		.loc 1 121 24 is_stmt 1 view .LVU83
 248              		.syntax unified
 249              	@ 121 "DSP/Source/BasicMathFunctions/arm_scale_q15.c" 1
 250 0084 02F30F02 		ssat r2, #16, r2
 251              	@ 0 "" 2
 252              	.LVL35:
 253              		.loc 1 121 24 view .LVU84
 254              		.loc 1 121 24 is_stmt 0 view .LVU85
 255              		.thumb
 256              		.syntax unified
 257              	.LBE8:
 258              		.loc 1 121 13 view .LVU86
 259 0088 23F8022B 		strh	r2, [r3], #2	@ movhi
 260              	.LVL36:
 122:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
 123:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     /* Decrement the loop counter */
 124:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     blkCnt--;
 261              		.loc 1 124 5 is_stmt 1 view .LVU87
 262              		.loc 1 124 11 is_stmt 0 view .LVU88
 263 008c 013C     		subs	r4, r4, #1
 264              	.LVL37:
 265              	.L4:
 117:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   {
 266              		.loc 1 117 17 is_stmt 1 view .LVU89
 267 008e 002C     		cmp	r4, #0
 268 0090 F2D1     		bne	.L5
 125:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   }
 126:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
 127:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** #else
 128:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccYgX0oi.s 			page 8


 129:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   /* Run the below code for Cortex-M0 */
 130:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
 131:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   /* Initialize blkCnt with number of samples */
 132:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   blkCnt = blockSize;
 133:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
 134:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   while (blkCnt > 0U)
 135:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   {
 136:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     /* C = A * scale */
 137:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     /* Scale the input and then store the result in the destination buffer. */
 138:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     *pDst++ = (q15_t) (__SSAT(((q31_t) * pSrc++ * scaleFract) >> kShift, 16));
 139:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
 140:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     /* Decrement the loop counter */
 141:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****     blkCnt--;
 142:DSP/Source/BasicMathFunctions/arm_scale_q15.c ****   }
 143:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
 144:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
 145:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** 
 146:DSP/Source/BasicMathFunctions/arm_scale_q15.c **** }
 269              		.loc 1 146 1 is_stmt 0 view .LVU90
 270 0092 F0BD     		pop	{r4, r5, r6, r7, pc}
 271              		.loc 1 146 1 view .LVU91
 272              		.cfi_endproc
 273              	.LFE139:
 275              		.text
 276              	.Letext0:
 277              		.file 2 "/Users/luban/.local/xPacks/arm-none-eabi-gcc/xpack-arm-none-eabi-gcc-13.2.1-1.1/arm-none-
 278              		.file 3 "/Users/luban/.local/xPacks/arm-none-eabi-gcc/xpack-arm-none-eabi-gcc-13.2.1-1.1/arm-none-
 279              		.file 4 "DSP/Inc/arm_math.h"
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccYgX0oi.s 			page 9


DEFINED SYMBOLS
                            *ABS*:00000000 arm_scale_q15.c
/var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccYgX0oi.s:21     .text.arm_scale_q15:00000000 $t
/var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccYgX0oi.s:27     .text.arm_scale_q15:00000000 arm_scale_q15

NO UNDEFINED SYMBOLS
