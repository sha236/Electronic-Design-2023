ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"arm_mat_cmplx_mult_q31.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c"
  20              		.section	.text.arm_mat_cmplx_mult_q31,"ax",%progbits
  21              		.align	1
  22              		.global	arm_mat_cmplx_mult_q31
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	arm_mat_cmplx_mult_q31:
  28              	.LVL0:
  29              	.LFB139:
   1:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** /* ----------------------------------------------------------------------
   2:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * Project:      CMSIS DSP Library
   3:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * Title:        arm_mat_cmplx_mult_q31.c
   4:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * Description:  Floating-point matrix multiplication
   5:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  *
   6:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * $Date:        27. January 2017
   7:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * $Revision:    V.1.5.1
   8:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  *
   9:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * Target Processor: Cortex-M cores
  10:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * -------------------------------------------------------------------- */
  11:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** /*
  12:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  *
  14:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  *
  16:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * not use this file except in compliance with the License.
  18:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * You may obtain a copy of the License at
  19:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  *
  20:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  *
  22:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * See the License for the specific language governing permissions and
  26:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * limitations under the License.
  27:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  */
  28:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  29:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** #include "arm_math.h"
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 2


  30:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  31:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** /**
  32:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * @ingroup groupMatrix
  33:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  */
  34:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  35:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** /**
  36:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * @addtogroup CmplxMatrixMult
  37:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * @{
  38:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  */
  39:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  40:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** /**
  41:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * @brief Q31 Complex matrix multiplication
  42:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * @param[in]       *pSrcA points to the first input complex matrix structure
  43:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * @param[in]       *pSrcB points to the second input complex matrix structure
  44:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * @param[out]      *pDst points to output complex matrix structure
  45:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * @return     		The function returns either
  46:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of siz
  47:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  *
  48:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * @details
  49:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * <b>Scaling and Overflow Behavior:</b>
  50:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  *
  51:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * \par
  52:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * The function is implemented using an internal 64-bit accumulator.
  53:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * The accumulator has a 2.62 format and maintains full precision of the intermediate
  54:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * multiplication results but provides only a single guard bit. There is no saturation
  55:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * on intermediate additions. Thus, if the accumulator overflows it wraps around and
  56:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * distorts the result. The input signals should be scaled down to avoid intermediate
  57:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * overflows. The input is thus scaled down by log2(numColsA) bits
  58:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * to avoid overflows, as a total of numColsA additions are performed internally.
  59:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * The 2.62 accumulator is right shifted by 31 bits and saturated to 1.31 format to yield the final
  60:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  *
  61:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  *
  62:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  */
  63:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  64:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** arm_status arm_mat_cmplx_mult_q31(
  65:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   const arm_matrix_instance_q31 * pSrcA,
  66:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   const arm_matrix_instance_q31 * pSrcB,
  67:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   arm_matrix_instance_q31 * pDst)
  68:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** {
  30              		.loc 1 68 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 56
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 68 1 is_stmt 0 view .LVU1
  35 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 36
  38              		.cfi_offset 4, -36
  39              		.cfi_offset 5, -32
  40              		.cfi_offset 6, -28
  41              		.cfi_offset 7, -24
  42              		.cfi_offset 8, -20
  43              		.cfi_offset 9, -16
  44              		.cfi_offset 10, -12
  45              		.cfi_offset 11, -8
  46              		.cfi_offset 14, -4
  47 0004 8FB0     		sub	sp, sp, #60
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 3


  48              	.LCFI1:
  49              		.cfi_def_cfa_offset 96
  50 0006 0C46     		mov	r4, r1
  51 0008 1346     		mov	r3, r2
  69:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   q31_t *pIn1 = pSrcA->pData;                    /* input data matrix pointer A */
  52              		.loc 1 69 3 is_stmt 1 view .LVU2
  53              	.LVL1:
  70:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   q31_t *pIn2 = pSrcB->pData;                    /* input data matrix pointer B */
  54              		.loc 1 70 3 view .LVU3
  71:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   q31_t *pInA = pSrcA->pData;                    /* input data matrix pointer A  */
  55              		.loc 1 71 3 view .LVU4
  56              		.loc 1 71 10 is_stmt 0 view .LVU5
  57 000a D0F80490 		ldr	r9, [r0, #4]
  58              	.LVL2:
  72:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   q31_t *pOut = pDst->pData;                     /* output data matrix pointer */
  59              		.loc 1 72 3 is_stmt 1 view .LVU6
  60              		.loc 1 72 10 is_stmt 0 view .LVU7
  61 000e 5268     		ldr	r2, [r2, #4]
  62              	.LVL3:
  73:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   q31_t *px;                                     /* Temporary output data matrix pointer */
  63              		.loc 1 73 3 is_stmt 1 view .LVU8
  74:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
  64              		.loc 1 74 3 view .LVU9
  65              		.loc 1 74 12 is_stmt 0 view .LVU10
  66 0010 0188     		ldrh	r1, [r0]
  67              	.LVL4:
  75:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
  68              		.loc 1 75 3 is_stmt 1 view .LVU11
  69              		.loc 1 75 12 is_stmt 0 view .LVU12
  70 0012 6588     		ldrh	r5, [r4, #2]
  71 0014 0195     		str	r5, [sp, #4]
  72              	.LVL5:
  76:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
  73              		.loc 1 76 3 is_stmt 1 view .LVU13
  74              		.loc 1 76 12 is_stmt 0 view .LVU14
  75 0016 4788     		ldrh	r7, [r0, #2]
  76              	.LVL6:
  77:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   q63_t sumReal1, sumImag1;                      /* accumulator */
  77              		.loc 1 77 3 is_stmt 1 view .LVU15
  78:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   q31_t a0, b0, c0, d0;
  78              		.loc 1 78 3 view .LVU16
  79:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   q31_t a1, b1, c1, d1;
  79              		.loc 1 79 3 view .LVU17
  80:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  81:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  82:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  83:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  84:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   uint16_t col, i = 0U, j, row = numRowsA, colCnt;      /* loop counters */
  80              		.loc 1 84 3 view .LVU18
  85:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   arm_status status;                             /* status of matrix multiplication */
  81              		.loc 1 85 3 view .LVU19
  86:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  87:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** #ifdef ARM_MATH_MATRIX_CHECK
  88:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  89:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  90:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   /* Check for matrix mismatch condition */
  91:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   if ((pSrcA->numCols != pSrcB->numRows) ||
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 4


  82              		.loc 1 91 3 view .LVU20
  83              		.loc 1 91 31 is_stmt 0 view .LVU21
  84 0018 2088     		ldrh	r0, [r4]
  85              	.LVL7:
  86              		.loc 1 91 6 view .LVU22
  87 001a B842     		cmp	r0, r7
  88 001c 40F0BC81 		bne	.L11
  92:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      (pSrcA->numRows != pDst->numRows) || (pSrcB->numCols != pDst->numCols))
  89              		.loc 1 92 29 view .LVU23
  90 0020 1888     		ldrh	r0, [r3]
  91:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      (pSrcA->numRows != pDst->numRows) || (pSrcB->numCols != pDst->numCols))
  91              		.loc 1 91 42 discriminator 1 view .LVU24
  92 0022 8842     		cmp	r0, r1
  93 0024 40F0BB81 		bne	.L12
  94              		.loc 1 92 66 view .LVU25
  95 0028 5B88     		ldrh	r3, [r3, #2]
  96              	.LVL8:
  97              		.loc 1 92 40 view .LVU26
  98 002a AB42     		cmp	r3, r5
  99 002c 40F0BA81 		bne	.L13
  84:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   arm_status status;                             /* status of matrix multiplication */
 100              		.loc 1 84 17 view .LVU27
 101 0030 0020     		movs	r0, #0
 102 0032 CE46     		mov	lr, r9
 103 0034 0D92     		str	r2, [sp, #52]
 104 0036 0A46     		mov	r2, r1
 105              	.LVL9:
  84:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   arm_status status;                             /* status of matrix multiplication */
 106              		.loc 1 84 17 view .LVU28
 107 0038 0697     		str	r7, [sp, #24]
 108 003a 0A94     		str	r4, [sp, #40]
 109 003c 94E1     		b	.L10
 110              	.LVL10:
 111              	.L4:
  93:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   {
  94:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  95:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
  96:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     status = ARM_MATH_SIZE_MISMATCH;
  97:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   }
  98:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   else
  99:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** #endif /*      #ifdef ARM_MATH_MATRIX_CHECK    */
 100:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 101:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   {
 102:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB *
 103:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     /* row loop */
 104:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     do
 105:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     {
 106:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       /* Output pointer is set to starting address of the row being processed */
 107:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       px = pOut + 2 * i;
 108:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 109:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       /* For every row wise process, the column loop counter is to be initiated */
 110:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       col = numColsB;
 111:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 112:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       /* For every row wise process, the pIn2 pointer is set
 113:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****        ** to the starting address of the pSrcB data */
 114:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       pIn2 = pSrcB->pData;
 115:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 5


 116:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       j = 0U;
 117:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 118:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       /* column loop */
 119:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       do
 120:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       {
 121:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /* Set the variable sum, that acts as accumulator, to zero */
 122:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         sumReal1 = 0.0;
 123:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         sumImag1 = 0.0;
 124:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 125:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /* Initiate the pointer pIn1 to point to the starting address of the column being processed
 126:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         pIn1 = pInA;
 127:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 128:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /* Apply loop unrolling and compute 4 MACs simultaneously. */
 129:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         colCnt = numColsA >> 2;
 130:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 131:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /* matrix multiplication        */
 132:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         while (colCnt > 0U)
 133:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         {
 134:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 135:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Reading real part of complex matrix A */
 136:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           a0 = *pIn1;
 112              		.loc 1 136 11 is_stmt 1 view .LVU29
 113              		.loc 1 136 14 is_stmt 0 view .LVU30
 114 003e DBF80050 		ldr	r5, [fp]
 115              	.LVL11:
 137:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 138:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Reading real part of complex matrix B */
 139:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           c0 = *pIn2;
 116              		.loc 1 139 11 is_stmt 1 view .LVU31
 117              		.loc 1 139 14 is_stmt 0 view .LVU32
 118 0042 DAF80020 		ldr	r2, [r10]
 119              	.LVL12:
 140:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 141:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Reading imaginary part of complex matrix A */
 142:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           b0 = *(pIn1 + 1U);
 120              		.loc 1 142 11 is_stmt 1 view .LVU33
 121              		.loc 1 142 14 is_stmt 0 view .LVU34
 122 0046 DBF80460 		ldr	r6, [fp, #4]
 123              	.LVL13:
 143:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 144:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Reading imaginary part of complex matrix B */
 145:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           d0 = *(pIn2 + 1U);
 124              		.loc 1 145 11 is_stmt 1 view .LVU35
 125              		.loc 1 145 14 is_stmt 0 view .LVU36
 126 004a DAF80410 		ldr	r1, [r10, #4]
 127              	.LVL14:
 146:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 147:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Multiply and Accumlates */
 148:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumReal1 += (q63_t) a0 *c0;
 128              		.loc 1 148 11 is_stmt 1 view .LVU37
 129              		.loc 1 148 23 is_stmt 0 view .LVU38
 130 004e 4FEAE57C 		asr	ip, r5, #31
 131              		.loc 1 148 34 view .LVU39
 132 0052 D717     		asrs	r7, r2, #31
 133 0054 05FB07F9 		mul	r9, r5, r7
 134 0058 02FB0C99 		mla	r9, r2, ip, r9
 135 005c A5FB028E 		umull	r8, lr, r5, r2
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 6


 136 0060 CE44     		add	lr, lr, r9
 137              		.loc 1 148 20 view .LVU40
 138 0062 18EB0303 		adds	r3, r8, r3
 139              	.LVL15:
 140              		.loc 1 148 20 view .LVU41
 141 0066 0493     		str	r3, [sp, #16]
 142 0068 4EEB0404 		adc	r4, lr, r4
 143              	.LVL16:
 149:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumImag1 += (q63_t) b0 *c0;
 144              		.loc 1 149 11 is_stmt 1 view .LVU42
 145              		.loc 1 149 23 is_stmt 0 view .LVU43
 146 006c 4FEAE678 		asr	r8, r6, #31
 147              		.loc 1 149 34 view .LVU44
 148 0070 02FB08FE 		mul	lr, r2, r8
 149 0074 06FB07EE 		mla	lr, r6, r7, lr
 150 0078 A2FB0672 		umull	r7, r2, r2, r6
 151              	.LVL17:
 152              		.loc 1 149 34 view .LVU45
 153 007c 7244     		add	r2, r2, lr
 154              		.loc 1 149 20 view .LVU46
 155 007e 029B     		ldr	r3, [sp, #8]
 156              	.LVL18:
 157              		.loc 1 149 20 view .LVU47
 158 0080 FF18     		adds	r7, r7, r3
 159 0082 42EB0002 		adc	r2, r2, r0
 160              	.LVL19:
 150:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 151:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* update pointers */
 152:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           pIn1 += 2U;
 161              		.loc 1 152 11 is_stmt 1 view .LVU48
 153:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           pIn2 += 2 * numColsB;
 162              		.loc 1 153 11 view .LVU49
 163              		.loc 1 153 16 is_stmt 0 view .LVU50
 164 0086 0198     		ldr	r0, [sp, #4]
 165 0088 0AEBC00E 		add	lr, r10, r0, lsl #3
 166              	.LVL20:
 154:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 155:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Multiply and Accumlates */
 156:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumReal1 -= (q63_t) b0 *d0;
 167              		.loc 1 156 11 is_stmt 1 view .LVU51
 168              		.loc 1 156 34 is_stmt 0 view .LVU52
 169 008c C817     		asrs	r0, r1, #31
 170 008e 06FB00F9 		mul	r9, r6, r0
 171 0092 01FB0898 		mla	r8, r1, r8, r9
 172 0096 A6FB0196 		umull	r9, r6, r6, r1
 173              	.LVL21:
 174              		.loc 1 156 34 view .LVU53
 175 009a 4644     		add	r6, r6, r8
 176              		.loc 1 156 20 view .LVU54
 177 009c 049B     		ldr	r3, [sp, #16]
 178 009e B3EB0903 		subs	r3, r3, r9
 179 00a2 64EB0604 		sbc	r4, r4, r6
 180              	.LVL22:
 157:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumImag1 += (q63_t) a0 *d0;
 181              		.loc 1 157 11 is_stmt 1 view .LVU55
 182              		.loc 1 157 34 is_stmt 0 view .LVU56
 183 00a6 05FB00F0 		mul	r0, r5, r0
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 7


 184 00aa 01FB0C00 		mla	r0, r1, ip, r0
 185 00ae A5FB0115 		umull	r1, r5, r5, r1
 186              	.LVL23:
 187              		.loc 1 157 34 view .LVU57
 188 00b2 0544     		add	r5, r5, r0
 189              		.loc 1 157 20 view .LVU58
 190 00b4 C919     		adds	r1, r1, r7
 191 00b6 45EB0202 		adc	r2, r5, r2
 192              	.LVL24:
 193              		.loc 1 157 20 view .LVU59
 194 00ba 0292     		str	r2, [sp, #8]
 195              	.LVL25:
 158:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 159:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
 160:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 161:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* read real and imag values from pSrcA and pSrcB buffer */
 162:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           a1 = *pIn1;
 196              		.loc 1 162 11 is_stmt 1 view .LVU60
 197              		.loc 1 162 14 is_stmt 0 view .LVU61
 198 00bc DBF80860 		ldr	r6, [fp, #8]
 199              	.LVL26:
 163:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           c1 = *pIn2;
 200              		.loc 1 163 11 is_stmt 1 view .LVU62
 201              		.loc 1 163 14 is_stmt 0 view .LVU63
 202 00c0 0198     		ldr	r0, [sp, #4]
 203 00c2 5AF83050 		ldr	r5, [r10, r0, lsl #3]
 204              	.LVL27:
 164:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           b1 = *(pIn1 + 1U);
 205              		.loc 1 164 11 is_stmt 1 view .LVU64
 206              		.loc 1 164 14 is_stmt 0 view .LVU65
 207 00c6 DBF80C00 		ldr	r0, [fp, #12]
 208              	.LVL28:
 165:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           d1 = *(pIn2 + 1U);
 209              		.loc 1 165 11 is_stmt 1 view .LVU66
 210              		.loc 1 165 14 is_stmt 0 view .LVU67
 211 00ca DEF80420 		ldr	r2, [lr, #4]
 212              	.LVL29:
 166:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 167:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Multiply and Accumlates */
 168:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumReal1 += (q63_t) a1 *c1;
 213              		.loc 1 168 11 is_stmt 1 view .LVU68
 214              		.loc 1 168 23 is_stmt 0 view .LVU69
 215 00ce 4FEAE679 		asr	r9, r6, #31
 216              		.loc 1 168 34 view .LVU70
 217 00d2 4FEAE57A 		asr	r10, r5, #31
 218              	.LVL30:
 219              		.loc 1 168 34 view .LVU71
 220 00d6 06FB0AF8 		mul	r8, r6, r10
 221 00da 05FB0988 		mla	r8, r5, r9, r8
 222 00de A6FB057C 		umull	r7, ip, r6, r5
 223 00e2 C444     		add	ip, ip, r8
 224              		.loc 1 168 20 view .LVU72
 225 00e4 FF18     		adds	r7, r7, r3
 226 00e6 4CEB040C 		adc	ip, ip, r4
 227              	.LVL31:
 169:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumImag1 += (q63_t) b1 *c1;
 228              		.loc 1 169 11 is_stmt 1 view .LVU73
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 8


 229              		.loc 1 169 23 is_stmt 0 view .LVU74
 230 00ea C317     		asrs	r3, r0, #31
 231              		.loc 1 169 34 view .LVU75
 232 00ec 05FB03F8 		mul	r8, r5, r3
 233 00f0 00FB0A88 		mla	r8, r0, r10, r8
 234 00f4 A5FB0045 		umull	r4, r5, r5, r0
 235              	.LVL32:
 236              		.loc 1 169 34 view .LVU76
 237 00f8 4544     		add	r5, r5, r8
 238              		.loc 1 169 20 view .LVU77
 239 00fa 6118     		adds	r1, r4, r1
 240              	.LVL33:
 241              		.loc 1 169 20 view .LVU78
 242 00fc 029C     		ldr	r4, [sp, #8]
 243 00fe 45EB0405 		adc	r5, r5, r4
 244              	.LVL34:
 170:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 171:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* update pointers */
 172:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           pIn1 += 2U;
 245              		.loc 1 172 11 is_stmt 1 view .LVU79
 173:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           pIn2 += 2 * numColsB;
 246              		.loc 1 173 11 view .LVU80
 247              		.loc 1 173 16 is_stmt 0 view .LVU81
 248 0102 019C     		ldr	r4, [sp, #4]
 249 0104 0EEBC408 		add	r8, lr, r4, lsl #3
 250              	.LVL35:
 174:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 175:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Multiply and Accumlates */
 176:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumReal1 -= (q63_t) b1 *d1;
 251              		.loc 1 176 11 is_stmt 1 view .LVU82
 252              		.loc 1 176 34 is_stmt 0 view .LVU83
 253 0108 D417     		asrs	r4, r2, #31
 254 010a 00FB04FA 		mul	r10, r0, r4
 255 010e 02FB03A3 		mla	r3, r2, r3, r10
 256 0112 A0FB02A0 		umull	r10, r0, r0, r2
 257              	.LVL36:
 258              		.loc 1 176 34 view .LVU84
 259 0116 1844     		add	r0, r0, r3
 260              		.loc 1 176 20 view .LVU85
 261 0118 B7EB0A07 		subs	r7, r7, r10
 262              	.LVL37:
 263              		.loc 1 176 20 view .LVU86
 264 011c 6CEB0000 		sbc	r0, ip, r0
 265              	.LVL38:
 177:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumImag1 += (q63_t) a1 *d1;
 266              		.loc 1 177 11 is_stmt 1 view .LVU87
 267              		.loc 1 177 34 is_stmt 0 view .LVU88
 268 0120 06FB04F4 		mul	r4, r6, r4
 269 0124 02FB0944 		mla	r4, r2, r9, r4
 270 0128 A6FB0226 		umull	r2, r6, r6, r2
 271              	.LVL39:
 272              		.loc 1 177 34 view .LVU89
 273 012c 2644     		add	r6, r6, r4
 274              		.loc 1 177 20 view .LVU90
 275 012e 5218     		adds	r2, r2, r1
 276 0130 46EB0503 		adc	r3, r6, r5
 277 0134 0293     		str	r3, [sp, #8]
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 9


 278              	.LVL40:
 178:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 179:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           a0 = *pIn1;
 279              		.loc 1 179 11 is_stmt 1 view .LVU91
 280              		.loc 1 179 14 is_stmt 0 view .LVU92
 281 0136 DBF81050 		ldr	r5, [fp, #16]
 282              	.LVL41:
 180:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           c0 = *pIn2;
 283              		.loc 1 180 11 is_stmt 1 view .LVU93
 284              		.loc 1 180 14 is_stmt 0 view .LVU94
 285 013a 019C     		ldr	r4, [sp, #4]
 286 013c 5EF83430 		ldr	r3, [lr, r4, lsl #3]
 287              	.LVL42:
 181:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 182:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           b0 = *(pIn1 + 1U);
 288              		.loc 1 182 11 is_stmt 1 view .LVU95
 289              		.loc 1 182 14 is_stmt 0 view .LVU96
 290 0140 DBF81440 		ldr	r4, [fp, #20]
 291              	.LVL43:
 183:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           d0 = *(pIn2 + 1U);
 292              		.loc 1 183 11 is_stmt 1 view .LVU97
 293              		.loc 1 183 14 is_stmt 0 view .LVU98
 294 0144 D8F80410 		ldr	r1, [r8, #4]
 295              	.LVL44:
 184:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 185:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Multiply and Accumlates */
 186:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumReal1 += (q63_t) a0 *c0;
 296              		.loc 1 186 11 is_stmt 1 view .LVU99
 297              		.loc 1 186 23 is_stmt 0 view .LVU100
 298 0148 4FEAE579 		asr	r9, r5, #31
 299              		.loc 1 186 34 view .LVU101
 300 014c 4FEAE37A 		asr	r10, r3, #31
 301 0150 05FB0AFE 		mul	lr, r5, r10
 302              	.LVL45:
 303              		.loc 1 186 34 view .LVU102
 304 0154 03FB09EE 		mla	lr, r3, r9, lr
 305 0158 A5FB036C 		umull	r6, ip, r5, r3
 306 015c F444     		add	ip, ip, lr
 307              		.loc 1 186 20 view .LVU103
 308 015e F619     		adds	r6, r6, r7
 309 0160 4CEB000C 		adc	ip, ip, r0
 310              	.LVL46:
 187:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumImag1 += (q63_t) b0 *c0;
 311              		.loc 1 187 11 is_stmt 1 view .LVU104
 312              		.loc 1 187 23 is_stmt 0 view .LVU105
 313 0164 E017     		asrs	r0, r4, #31
 314              		.loc 1 187 34 view .LVU106
 315 0166 03FB00FE 		mul	lr, r3, r0
 316 016a 04FB0AEE 		mla	lr, r4, r10, lr
 317 016e A3FB0473 		umull	r7, r3, r3, r4
 318              	.LVL47:
 319              		.loc 1 187 34 view .LVU107
 320 0172 7344     		add	r3, r3, lr
 321              		.loc 1 187 20 view .LVU108
 322 0174 BA18     		adds	r2, r7, r2
 323              	.LVL48:
 324              		.loc 1 187 20 view .LVU109
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 10


 325 0176 029F     		ldr	r7, [sp, #8]
 326 0178 43EB0703 		adc	r3, r3, r7
 327              	.LVL49:
 188:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 189:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* update pointers */
 190:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           pIn1 += 2U;
 328              		.loc 1 190 11 is_stmt 1 view .LVU110
 191:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           pIn2 += 2 * numColsB;
 329              		.loc 1 191 11 view .LVU111
 330              		.loc 1 191 16 is_stmt 0 view .LVU112
 331 017c 019F     		ldr	r7, [sp, #4]
 332 017e 08EBC70A 		add	r10, r8, r7, lsl #3
 333              	.LVL50:
 192:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 193:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Multiply and Accumlates */
 194:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumReal1 -= (q63_t) b0 *d0;
 334              		.loc 1 194 11 is_stmt 1 view .LVU113
 335              		.loc 1 194 34 is_stmt 0 view .LVU114
 336 0182 CF17     		asrs	r7, r1, #31
 337 0184 04FB07FE 		mul	lr, r4, r7
 338 0188 01FB00E0 		mla	r0, r1, r0, lr
 339 018c A4FB01E4 		umull	lr, r4, r4, r1
 340              	.LVL51:
 341              		.loc 1 194 34 view .LVU115
 342 0190 0444     		add	r4, r4, r0
 343              		.loc 1 194 20 view .LVU116
 344 0192 B6EB0E06 		subs	r6, r6, lr
 345              	.LVL52:
 346              		.loc 1 194 20 view .LVU117
 347 0196 6CEB040C 		sbc	ip, ip, r4
 348              	.LVL53:
 195:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumImag1 += (q63_t) a0 *d0;
 349              		.loc 1 195 11 is_stmt 1 view .LVU118
 350              		.loc 1 195 34 is_stmt 0 view .LVU119
 351 019a 05FB07F7 		mul	r7, r5, r7
 352 019e 01FB0977 		mla	r7, r1, r9, r7
 353 01a2 A5FB0115 		umull	r1, r5, r5, r1
 354              	.LVL54:
 355              		.loc 1 195 34 view .LVU120
 356 01a6 3D44     		add	r5, r5, r7
 357              		.loc 1 195 20 view .LVU121
 358 01a8 8A18     		adds	r2, r1, r2
 359              	.LVL55:
 360              		.loc 1 195 20 view .LVU122
 361 01aa 0292     		str	r2, [sp, #8]
 362 01ac 45EB0305 		adc	r5, r5, r3
 363              	.LVL56:
 196:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 197:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
 198:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 199:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           a1 = *pIn1;
 364              		.loc 1 199 11 is_stmt 1 view .LVU123
 365              		.loc 1 199 14 is_stmt 0 view .LVU124
 366 01b0 DBF81800 		ldr	r0, [fp, #24]
 367              	.LVL57:
 200:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           c1 = *pIn2;
 368              		.loc 1 200 11 is_stmt 1 view .LVU125
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 11


 369              		.loc 1 200 14 is_stmt 0 view .LVU126
 370 01b4 019F     		ldr	r7, [sp, #4]
 371 01b6 58F83770 		ldr	r7, [r8, r7, lsl #3]
 372              	.LVL58:
 201:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 202:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           b1 = *(pIn1 + 1U);
 373              		.loc 1 202 11 is_stmt 1 view .LVU127
 374              		.loc 1 202 14 is_stmt 0 view .LVU128
 375 01ba DBF81C20 		ldr	r2, [fp, #28]
 376              	.LVL59:
 203:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           d1 = *(pIn2 + 1U);
 377              		.loc 1 203 11 is_stmt 1 view .LVU129
 378              		.loc 1 203 14 is_stmt 0 view .LVU130
 379 01be DAF80410 		ldr	r1, [r10, #4]
 380              	.LVL60:
 204:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 205:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Multiply and Accumlates */
 206:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumReal1 += (q63_t) a1 *c1;
 381              		.loc 1 206 11 is_stmt 1 view .LVU131
 382              		.loc 1 206 23 is_stmt 0 view .LVU132
 383 01c2 4FEAE079 		asr	r9, r0, #31
 384              		.loc 1 206 34 view .LVU133
 385 01c6 4FEAE77E 		asr	lr, r7, #31
 386 01ca 00FB0EF8 		mul	r8, r0, lr
 387              	.LVL61:
 388              		.loc 1 206 34 view .LVU134
 389 01ce 07FB0988 		mla	r8, r7, r9, r8
 390 01d2 A0FB0734 		umull	r3, r4, r0, r7
 391 01d6 4444     		add	r4, r4, r8
 392              		.loc 1 206 20 view .LVU135
 393 01d8 9B19     		adds	r3, r3, r6
 394 01da 0493     		str	r3, [sp, #16]
 395 01dc 44EB0C04 		adc	r4, r4, ip
 396              	.LVL62:
 207:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumImag1 += (q63_t) b1 *c1;
 397              		.loc 1 207 11 is_stmt 1 view .LVU136
 398              		.loc 1 207 23 is_stmt 0 view .LVU137
 399 01e0 D617     		asrs	r6, r2, #31
 400              		.loc 1 207 34 view .LVU138
 401 01e2 07FB06F8 		mul	r8, r7, r6
 402 01e6 02FB0E88 		mla	r8, r2, lr, r8
 403 01ea A7FB02C7 		umull	ip, r7, r7, r2
 404              	.LVL63:
 405              		.loc 1 207 34 view .LVU139
 406 01ee 4744     		add	r7, r7, r8
 407              		.loc 1 207 20 view .LVU140
 408 01f0 029B     		ldr	r3, [sp, #8]
 409              	.LVL64:
 410              		.loc 1 207 20 view .LVU141
 411 01f2 1CEB030C 		adds	ip, ip, r3
 412 01f6 47EB0507 		adc	r7, r7, r5
 413              	.LVL65:
 208:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 209:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* update pointers */
 210:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           pIn1 += 2U;
 414              		.loc 1 210 11 is_stmt 1 view .LVU142
 415              		.loc 1 210 16 is_stmt 0 view .LVU143
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 12


 416 01fa 0BF1200B 		add	fp, fp, #32
 417              	.LVL66:
 211:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           pIn2 += 2 * numColsB;
 418              		.loc 1 211 11 is_stmt 1 view .LVU144
 419              		.loc 1 211 16 is_stmt 0 view .LVU145
 420 01fe 019D     		ldr	r5, [sp, #4]
 421 0200 0AEBC50A 		add	r10, r10, r5, lsl #3
 422              	.LVL67:
 212:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 213:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Multiply and Accumlates */
 214:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumReal1 -= (q63_t) b1 *d1;
 423              		.loc 1 214 11 is_stmt 1 view .LVU146
 424              		.loc 1 214 34 is_stmt 0 view .LVU147
 425 0204 CD17     		asrs	r5, r1, #31
 426 0206 02FB05FE 		mul	lr, r2, r5
 427 020a 01FB06E6 		mla	r6, r1, r6, lr
 428 020e A2FB01E2 		umull	lr, r2, r2, r1
 429              	.LVL68:
 430              		.loc 1 214 34 view .LVU148
 431 0212 3244     		add	r2, r2, r6
 432              		.loc 1 214 20 view .LVU149
 433 0214 049B     		ldr	r3, [sp, #16]
 434 0216 B3EB0E03 		subs	r3, r3, lr
 435 021a 64EB0204 		sbc	r4, r4, r2
 436              	.LVL69:
 215:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumImag1 += (q63_t) a1 *d1;
 437              		.loc 1 215 11 is_stmt 1 view .LVU150
 438              		.loc 1 215 34 is_stmt 0 view .LVU151
 439 021e 00FB05F5 		mul	r5, r0, r5
 440 0222 01FB0955 		mla	r5, r1, r9, r5
 441 0226 A0FB0110 		umull	r1, r0, r0, r1
 442              	.LVL70:
 443              		.loc 1 215 34 view .LVU152
 444 022a 2844     		add	r0, r0, r5
 445              		.loc 1 215 20 view .LVU153
 446 022c 11EB0C02 		adds	r2, r1, ip
 447 0230 0292     		str	r2, [sp, #8]
 448 0232 40EB0700 		adc	r0, r0, r7
 449              	.LVL71:
 216:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 217:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Decrement the loop count */
 218:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           colCnt--;
 450              		.loc 1 218 11 is_stmt 1 view .LVU154
 451              		.loc 1 218 17 is_stmt 0 view .LVU155
 452 0236 039A     		ldr	r2, [sp, #12]
 453              	.LVL72:
 454              		.loc 1 218 17 view .LVU156
 455 0238 013A     		subs	r2, r2, #1
 456 023a 92B2     		uxth	r2, r2
 457 023c 0392     		str	r2, [sp, #12]
 458              	.LVL73:
 459              	.L3:
 132:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         {
 460              		.loc 1 132 23 is_stmt 1 view .LVU157
 461 023e 039A     		ldr	r2, [sp, #12]
 462 0240 002A     		cmp	r2, #0
 463 0242 7FF4FCAE 		bne	.L4
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 13


 219:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         }
 220:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 221:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
 222:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          ** No loop unrolling is used. */
 223:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         colCnt = numColsA % 0x4U;
 464              		.loc 1 223 16 is_stmt 0 view .LVU158
 465 0246 0390     		str	r0, [sp, #12]
 466              	.LVL74:
 467              		.loc 1 223 9 is_stmt 1 view .LVU159
 468              		.loc 1 223 16 is_stmt 0 view .LVU160
 469 0248 069A     		ldr	r2, [sp, #24]
 470 024a 02F00302 		and	r2, r2, #3
 471              	.LVL75:
 224:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 225:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         while (colCnt > 0U)
 472              		.loc 1 225 9 is_stmt 1 view .LVU161
 473              		.loc 1 225 15 is_stmt 0 view .LVU162
 474 024e 45E0     		b	.L5
 475              	.LVL76:
 476              	.L6:
 226:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         {
 227:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
 228:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           a1 = *pIn1;
 477              		.loc 1 228 11 is_stmt 1 view .LVU163
 478              		.loc 1 228 14 is_stmt 0 view .LVU164
 479 0250 DBF80000 		ldr	r0, [fp]
 480              	.LVL77:
 229:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           c1 = *pIn2;
 481              		.loc 1 229 11 is_stmt 1 view .LVU165
 482              		.loc 1 229 14 is_stmt 0 view .LVU166
 483 0254 DAF80010 		ldr	r1, [r10]
 484              	.LVL78:
 230:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 231:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           b1 = *(pIn1 + 1U);
 485              		.loc 1 231 11 is_stmt 1 view .LVU167
 486              		.loc 1 231 14 is_stmt 0 view .LVU168
 487 0258 DBF80460 		ldr	r6, [fp, #4]
 488              	.LVL79:
 232:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           d1 = *(pIn2 + 1U);
 489              		.loc 1 232 11 is_stmt 1 view .LVU169
 490              		.loc 1 232 14 is_stmt 0 view .LVU170
 491 025c DAF80450 		ldr	r5, [r10, #4]
 492              	.LVL80:
 233:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 234:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Multiply and Accumlates */
 235:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumReal1 += (q63_t) a1 *c1;
 493              		.loc 1 235 11 is_stmt 1 view .LVU171
 494              		.loc 1 235 23 is_stmt 0 view .LVU172
 495 0260 4FEAE07E 		asr	lr, r0, #31
 496              		.loc 1 235 34 view .LVU173
 497 0264 CF17     		asrs	r7, r1, #31
 498 0266 00FB07F9 		mul	r9, r0, r7
 499 026a 01FB0E99 		mla	r9, r1, lr, r9
 500 026e A0FB018C 		umull	r8, ip, r0, r1
 501 0272 CC44     		add	ip, ip, r9
 502              		.loc 1 235 20 view .LVU174
 503 0274 18EB0303 		adds	r3, r8, r3
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 14


 504              	.LVL81:
 505              		.loc 1 235 20 view .LVU175
 506 0278 0493     		str	r3, [sp, #16]
 507 027a 4CEB0404 		adc	r4, ip, r4
 508              	.LVL82:
 236:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumImag1 += (q63_t) b1 *c1;
 509              		.loc 1 236 11 is_stmt 1 view .LVU176
 510              		.loc 1 236 23 is_stmt 0 view .LVU177
 511 027e 4FEAE678 		asr	r8, r6, #31
 512              		.loc 1 236 34 view .LVU178
 513 0282 01FB08FC 		mul	ip, r1, r8
 514 0286 06FB07CC 		mla	ip, r6, r7, ip
 515 028a A1FB0671 		umull	r7, r1, r1, r6
 516              	.LVL83:
 517              		.loc 1 236 34 view .LVU179
 518 028e 6144     		add	r1, r1, ip
 519              		.loc 1 236 20 view .LVU180
 520 0290 029B     		ldr	r3, [sp, #8]
 521              	.LVL84:
 522              		.loc 1 236 20 view .LVU181
 523 0292 FF18     		adds	r7, r7, r3
 524 0294 039B     		ldr	r3, [sp, #12]
 525 0296 41EB0301 		adc	r1, r1, r3
 526              	.LVL85:
 237:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 238:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* update pointers */
 239:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           pIn1 += 2U;
 527              		.loc 1 239 11 is_stmt 1 view .LVU182
 528              		.loc 1 239 16 is_stmt 0 view .LVU183
 529 029a 0BF1080B 		add	fp, fp, #8
 530              	.LVL86:
 240:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           pIn2 += 2 * numColsB;
 531              		.loc 1 240 11 is_stmt 1 view .LVU184
 532              		.loc 1 240 16 is_stmt 0 view .LVU185
 533 029e 019B     		ldr	r3, [sp, #4]
 534 02a0 0AEBC30A 		add	r10, r10, r3, lsl #3
 535              	.LVL87:
 241:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 242:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Multiply and Accumlates */
 243:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumReal1 -= (q63_t) b1 *d1;
 536              		.loc 1 243 11 is_stmt 1 view .LVU186
 537              		.loc 1 243 34 is_stmt 0 view .LVU187
 538 02a4 4FEAE57C 		asr	ip, r5, #31
 539 02a8 06FB0CF9 		mul	r9, r6, ip
 540 02ac 05FB0898 		mla	r8, r5, r8, r9
 541 02b0 A6FB0596 		umull	r9, r6, r6, r5
 542              	.LVL88:
 543              		.loc 1 243 34 view .LVU188
 544 02b4 4644     		add	r6, r6, r8
 545              		.loc 1 243 20 view .LVU189
 546 02b6 049B     		ldr	r3, [sp, #16]
 547 02b8 B3EB0903 		subs	r3, r3, r9
 548 02bc 64EB0604 		sbc	r4, r4, r6
 549              	.LVL89:
 244:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumImag1 += (q63_t) a1 *d1;
 550              		.loc 1 244 11 is_stmt 1 view .LVU190
 551              		.loc 1 244 34 is_stmt 0 view .LVU191
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 15


 552 02c0 00FB0CFC 		mul	ip, r0, ip
 553 02c4 05FB0ECC 		mla	ip, r5, lr, ip
 554 02c8 A0FB0550 		umull	r5, r0, r0, r5
 555              	.LVL90:
 556              		.loc 1 244 34 view .LVU192
 557 02cc 6044     		add	r0, r0, ip
 558              		.loc 1 244 20 view .LVU193
 559 02ce ED19     		adds	r5, r5, r7
 560 02d0 0295     		str	r5, [sp, #8]
 561 02d2 40EB0101 		adc	r1, r0, r1
 562              	.LVL91:
 563              		.loc 1 244 20 view .LVU194
 564 02d6 0391     		str	r1, [sp, #12]
 565              	.LVL92:
 245:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 246:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Decrement the loop counter */
 247:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           colCnt--;
 566              		.loc 1 247 11 is_stmt 1 view .LVU195
 567              		.loc 1 247 17 is_stmt 0 view .LVU196
 568 02d8 013A     		subs	r2, r2, #1
 569              	.LVL93:
 570              		.loc 1 247 17 view .LVU197
 571 02da 92B2     		uxth	r2, r2
 572              	.LVL94:
 573              	.L5:
 225:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         {
 574              		.loc 1 225 23 is_stmt 1 view .LVU198
 575 02dc 002A     		cmp	r2, #0
 576 02de B7D1     		bne	.L6
 248:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         }
 249:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 250:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /* Store the result in the destination buffer */
 251:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         *px++ = (q31_t) clip_q63_to_q31(sumReal1 >> 31);
 577              		.loc 1 251 9 view .LVU199
 578              		.loc 1 251 25 is_stmt 0 view .LVU200
 579 02e0 DB0F     		lsrs	r3, r3, #31
 580              	.LVL95:
 581              		.loc 1 251 25 view .LVU201
 582 02e2 43EA4403 		orr	r3, r3, r4, lsl #1
 583              	.LVL96:
 584              	.LBB6:
 585              	.LBI6:
 586              		.file 2 "DSP/Inc/arm_math.h"
   1:DSP/Inc/arm_math.h **** /******************************************************************************
   2:DSP/Inc/arm_math.h ****  * @file     arm_math.h
   3:DSP/Inc/arm_math.h ****  * @brief    Public header file for CMSIS DSP LibraryU
   4:DSP/Inc/arm_math.h ****  * @version  V1.5.3
   5:DSP/Inc/arm_math.h ****  * @date     10. January 2018
   6:DSP/Inc/arm_math.h ****  ******************************************************************************/
   7:DSP/Inc/arm_math.h **** /*
   8:DSP/Inc/arm_math.h ****  * Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved.
   9:DSP/Inc/arm_math.h ****  *
  10:DSP/Inc/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  11:DSP/Inc/arm_math.h ****  *
  12:DSP/Inc/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:DSP/Inc/arm_math.h ****  * not use this file except in compliance with the License.
  14:DSP/Inc/arm_math.h ****  * You may obtain a copy of the License at
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 16


  15:DSP/Inc/arm_math.h ****  *
  16:DSP/Inc/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:DSP/Inc/arm_math.h ****  *
  18:DSP/Inc/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  19:DSP/Inc/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:DSP/Inc/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:DSP/Inc/arm_math.h ****  * See the License for the specific language governing permissions and
  22:DSP/Inc/arm_math.h ****  * limitations under the License.
  23:DSP/Inc/arm_math.h ****  */
  24:DSP/Inc/arm_math.h **** 
  25:DSP/Inc/arm_math.h **** /**
  26:DSP/Inc/arm_math.h ****    \mainpage CMSIS DSP Software Library
  27:DSP/Inc/arm_math.h ****    *
  28:DSP/Inc/arm_math.h ****    * Introduction
  29:DSP/Inc/arm_math.h ****    * ------------
  30:DSP/Inc/arm_math.h ****    *
  31:DSP/Inc/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  32:DSP/Inc/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  33:DSP/Inc/arm_math.h ****    *
  34:DSP/Inc/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  35:DSP/Inc/arm_math.h ****    * - Basic math functions
  36:DSP/Inc/arm_math.h ****    * - Fast math functions
  37:DSP/Inc/arm_math.h ****    * - Complex math functions
  38:DSP/Inc/arm_math.h ****    * - Filters
  39:DSP/Inc/arm_math.h ****    * - Matrix functions
  40:DSP/Inc/arm_math.h ****    * - Transforms
  41:DSP/Inc/arm_math.h ****    * - Motor control functions
  42:DSP/Inc/arm_math.h ****    * - Statistical functions
  43:DSP/Inc/arm_math.h ****    * - Support functions
  44:DSP/Inc/arm_math.h ****    * - Interpolation functions
  45:DSP/Inc/arm_math.h ****    *
  46:DSP/Inc/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  47:DSP/Inc/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  48:DSP/Inc/arm_math.h ****    *
  49:DSP/Inc/arm_math.h ****    * Using the Library
  50:DSP/Inc/arm_math.h ****    * ------------
  51:DSP/Inc/arm_math.h ****    *
  52:DSP/Inc/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  53:DSP/Inc/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  54:DSP/Inc/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  55:DSP/Inc/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  56:DSP/Inc/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  57:DSP/Inc/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  58:DSP/Inc/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  59:DSP/Inc/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  60:DSP/Inc/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  61:DSP/Inc/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  62:DSP/Inc/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  63:DSP/Inc/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  64:DSP/Inc/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  65:DSP/Inc/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  66:DSP/Inc/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  67:DSP/Inc/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (Armv8-M Baseline, Little endian)
  68:DSP/Inc/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (Armv8-M Mainline, Little endian)
  69:DSP/Inc/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (Armv8-M Mainline, Little endian, Single Precision Floating Point 
  70:DSP/Inc/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (Armv8-M Mainline, Little endian, DSP instructions)
  71:DSP/Inc/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (Armv8-M Mainline, Little endian, DSP instructions, Single Precis
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 17


  72:DSP/Inc/arm_math.h ****    *
  73:DSP/Inc/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  74:DSP/Inc/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  75:DSP/Inc/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  76:DSP/Inc/arm_math.h ****    * Define the appropriate preprocessor macro ARM_MATH_CM7 or ARM_MATH_CM4 or ARM_MATH_CM3 or
  77:DSP/Inc/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  78:DSP/Inc/arm_math.h ****    * For Armv8-M cores define preprocessor macro ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  79:DSP/Inc/arm_math.h ****    * Set preprocessor macro __DSP_PRESENT if Armv8-M Mainline core supports DSP instructions.
  80:DSP/Inc/arm_math.h ****    * 
  81:DSP/Inc/arm_math.h ****    *
  82:DSP/Inc/arm_math.h ****    * Examples
  83:DSP/Inc/arm_math.h ****    * --------
  84:DSP/Inc/arm_math.h ****    *
  85:DSP/Inc/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  86:DSP/Inc/arm_math.h ****    *
  87:DSP/Inc/arm_math.h ****    * Toolchain Support
  88:DSP/Inc/arm_math.h ****    * ------------
  89:DSP/Inc/arm_math.h ****    *
  90:DSP/Inc/arm_math.h ****    * The library has been developed and tested with MDK version 5.14.0.0
  91:DSP/Inc/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  92:DSP/Inc/arm_math.h ****    *
  93:DSP/Inc/arm_math.h ****    * Building the Library
  94:DSP/Inc/arm_math.h ****    * ------------
  95:DSP/Inc/arm_math.h ****    *
  96:DSP/Inc/arm_math.h ****    * The library installer contains a project file to rebuild libraries on MDK toolchain in the <co
  97:DSP/Inc/arm_math.h ****    * - arm_cortexM_math.uvprojx
  98:DSP/Inc/arm_math.h ****    *
  99:DSP/Inc/arm_math.h ****    *
 100:DSP/Inc/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 101:DSP/Inc/arm_math.h ****    *
 102:DSP/Inc/arm_math.h ****    * Preprocessor Macros
 103:DSP/Inc/arm_math.h ****    * ------------
 104:DSP/Inc/arm_math.h ****    *
 105:DSP/Inc/arm_math.h ****    * Each library project have different preprocessor macros.
 106:DSP/Inc/arm_math.h ****    *
 107:DSP/Inc/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 108:DSP/Inc/arm_math.h ****    *
 109:DSP/Inc/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 110:DSP/Inc/arm_math.h ****    *
 111:DSP/Inc/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 112:DSP/Inc/arm_math.h ****    *
 113:DSP/Inc/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 114:DSP/Inc/arm_math.h ****    *
 115:DSP/Inc/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 116:DSP/Inc/arm_math.h ****    *
 117:DSP/Inc/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 118:DSP/Inc/arm_math.h ****    *
 119:DSP/Inc/arm_math.h ****    * - ARM_MATH_ROUNDING:
 120:DSP/Inc/arm_math.h ****    *
 121:DSP/Inc/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 122:DSP/Inc/arm_math.h ****    *
 123:DSP/Inc/arm_math.h ****    * - ARM_MATH_CMx:
 124:DSP/Inc/arm_math.h ****    *
 125:DSP/Inc/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 126:DSP/Inc/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 127:DSP/Inc/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 128:DSP/Inc/arm_math.h ****    *
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 18


 129:DSP/Inc/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 130:DSP/Inc/arm_math.h ****    *
 131:DSP/Inc/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on Armv8-M Baseline target, ARM_MATH_A
 132:DSP/Inc/arm_math.h ****    * on Armv8-M Mainline target.
 133:DSP/Inc/arm_math.h ****    *
 134:DSP/Inc/arm_math.h ****    * - __FPU_PRESENT:
 135:DSP/Inc/arm_math.h ****    *
 136:DSP/Inc/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 137:DSP/Inc/arm_math.h ****    *
 138:DSP/Inc/arm_math.h ****    * - __DSP_PRESENT:
 139:DSP/Inc/arm_math.h ****    *
 140:DSP/Inc/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when Armv8-M Mainline core supports DSP instructions.
 141:DSP/Inc/arm_math.h ****    *
 142:DSP/Inc/arm_math.h ****    * <hr>
 143:DSP/Inc/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 144:DSP/Inc/arm_math.h ****    * -----------------------------
 145:DSP/Inc/arm_math.h ****    *
 146:DSP/Inc/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 147:DSP/Inc/arm_math.h ****    * |File/Folder                   |Content                                                       
 148:DSP/Inc/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 149:DSP/Inc/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 150:DSP/Inc/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 151:DSP/Inc/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 152:DSP/Inc/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 153:DSP/Inc/arm_math.h ****    *
 154:DSP/Inc/arm_math.h ****    * <hr>
 155:DSP/Inc/arm_math.h ****    * Revision History of CMSIS-DSP
 156:DSP/Inc/arm_math.h ****    * ------------
 157:DSP/Inc/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 158:DSP/Inc/arm_math.h ****    *
 159:DSP/Inc/arm_math.h ****    * Copyright Notice
 160:DSP/Inc/arm_math.h ****    * ------------
 161:DSP/Inc/arm_math.h ****    *
 162:DSP/Inc/arm_math.h ****    * Copyright (C) 2010-2015 Arm Limited. All rights reserved.
 163:DSP/Inc/arm_math.h ****    */
 164:DSP/Inc/arm_math.h **** 
 165:DSP/Inc/arm_math.h **** 
 166:DSP/Inc/arm_math.h **** /**
 167:DSP/Inc/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 168:DSP/Inc/arm_math.h ****  */
 169:DSP/Inc/arm_math.h **** 
 170:DSP/Inc/arm_math.h **** /**
 171:DSP/Inc/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 172:DSP/Inc/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 173:DSP/Inc/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 174:DSP/Inc/arm_math.h ****  * operate on individual values and not arrays.
 175:DSP/Inc/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 176:DSP/Inc/arm_math.h ****  *
 177:DSP/Inc/arm_math.h ****  */
 178:DSP/Inc/arm_math.h **** 
 179:DSP/Inc/arm_math.h **** /**
 180:DSP/Inc/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 181:DSP/Inc/arm_math.h ****  * This set of functions operates on complex data vectors.
 182:DSP/Inc/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 183:DSP/Inc/arm_math.h ****  * (real, imag, real, imag, ...).
 184:DSP/Inc/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 185:DSP/Inc/arm_math.h ****  * to the number of complex values; the array contains twice this number of
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 19


 186:DSP/Inc/arm_math.h ****  * real values.
 187:DSP/Inc/arm_math.h ****  */
 188:DSP/Inc/arm_math.h **** 
 189:DSP/Inc/arm_math.h **** /**
 190:DSP/Inc/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 191:DSP/Inc/arm_math.h ****  */
 192:DSP/Inc/arm_math.h **** 
 193:DSP/Inc/arm_math.h **** /**
 194:DSP/Inc/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 195:DSP/Inc/arm_math.h ****  *
 196:DSP/Inc/arm_math.h ****  * This set of functions provides basic matrix math operations.
 197:DSP/Inc/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 198:DSP/Inc/arm_math.h ****  * the type
 199:DSP/Inc/arm_math.h ****  * definition for the floating-point matrix structure is shown
 200:DSP/Inc/arm_math.h ****  * below:
 201:DSP/Inc/arm_math.h ****  * <pre>
 202:DSP/Inc/arm_math.h ****  *     typedef struct
 203:DSP/Inc/arm_math.h ****  *     {
 204:DSP/Inc/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 205:DSP/Inc/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 206:DSP/Inc/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 207:DSP/Inc/arm_math.h ****  *     } arm_matrix_instance_f32;
 208:DSP/Inc/arm_math.h ****  * </pre>
 209:DSP/Inc/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 210:DSP/Inc/arm_math.h ****  *
 211:DSP/Inc/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 212:DSP/Inc/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 213:DSP/Inc/arm_math.h ****  * and the values are arranged in row order.  That is, the
 214:DSP/Inc/arm_math.h ****  * matrix element (i, j) is stored at:
 215:DSP/Inc/arm_math.h ****  * <pre>
 216:DSP/Inc/arm_math.h ****  *     pData[i*numCols + j]
 217:DSP/Inc/arm_math.h ****  * </pre>
 218:DSP/Inc/arm_math.h ****  *
 219:DSP/Inc/arm_math.h ****  * \par Init Functions
 220:DSP/Inc/arm_math.h ****  * There is an associated initialization function for each type of matrix
 221:DSP/Inc/arm_math.h ****  * data structure.
 222:DSP/Inc/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 223:DSP/Inc/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 224:DSP/Inc/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 225:DSP/Inc/arm_math.h ****  *
 226:DSP/Inc/arm_math.h ****  * \par
 227:DSP/Inc/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 228:DSP/Inc/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 229:DSP/Inc/arm_math.h ****  * To place the instance structure in a const data
 230:DSP/Inc/arm_math.h ****  * section, manually initialize the data structure.  For example:
 231:DSP/Inc/arm_math.h ****  * <pre>
 232:DSP/Inc/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 233:DSP/Inc/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 234:DSP/Inc/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 235:DSP/Inc/arm_math.h ****  * </pre>
 236:DSP/Inc/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 237:DSP/Inc/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 238:DSP/Inc/arm_math.h ****  * data array.
 239:DSP/Inc/arm_math.h ****  *
 240:DSP/Inc/arm_math.h ****  * \par Size Checking
 241:DSP/Inc/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 242:DSP/Inc/arm_math.h ****  * output matrices. For example, the matrix addition function verifies that the
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 20


 243:DSP/Inc/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 244:DSP/Inc/arm_math.h ****  * columns. If the size check fails the functions return:
 245:DSP/Inc/arm_math.h ****  * <pre>
 246:DSP/Inc/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 247:DSP/Inc/arm_math.h ****  * </pre>
 248:DSP/Inc/arm_math.h ****  * Otherwise the functions return
 249:DSP/Inc/arm_math.h ****  * <pre>
 250:DSP/Inc/arm_math.h ****  *     ARM_MATH_SUCCESS
 251:DSP/Inc/arm_math.h ****  * </pre>
 252:DSP/Inc/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 253:DSP/Inc/arm_math.h ****  * The matrix size checking is enabled via the \#define
 254:DSP/Inc/arm_math.h ****  * <pre>
 255:DSP/Inc/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 256:DSP/Inc/arm_math.h ****  * </pre>
 257:DSP/Inc/arm_math.h ****  * within the library project settings.  By default this macro is defined
 258:DSP/Inc/arm_math.h ****  * and size checking is enabled. By changing the project settings and
 259:DSP/Inc/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 260:DSP/Inc/arm_math.h ****  * run a bit faster. With size checking disabled the functions always
 261:DSP/Inc/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 262:DSP/Inc/arm_math.h ****  */
 263:DSP/Inc/arm_math.h **** 
 264:DSP/Inc/arm_math.h **** /**
 265:DSP/Inc/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 266:DSP/Inc/arm_math.h ****  */
 267:DSP/Inc/arm_math.h **** 
 268:DSP/Inc/arm_math.h **** /**
 269:DSP/Inc/arm_math.h ****  * @defgroup groupController Controller Functions
 270:DSP/Inc/arm_math.h ****  */
 271:DSP/Inc/arm_math.h **** 
 272:DSP/Inc/arm_math.h **** /**
 273:DSP/Inc/arm_math.h ****  * @defgroup groupStats Statistics Functions
 274:DSP/Inc/arm_math.h ****  */
 275:DSP/Inc/arm_math.h **** /**
 276:DSP/Inc/arm_math.h ****  * @defgroup groupSupport Support Functions
 277:DSP/Inc/arm_math.h ****  */
 278:DSP/Inc/arm_math.h **** 
 279:DSP/Inc/arm_math.h **** /**
 280:DSP/Inc/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 281:DSP/Inc/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 282:DSP/Inc/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 283:DSP/Inc/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 284:DSP/Inc/arm_math.h ****  */
 285:DSP/Inc/arm_math.h **** 
 286:DSP/Inc/arm_math.h **** /**
 287:DSP/Inc/arm_math.h ****  * @defgroup groupExamples Examples
 288:DSP/Inc/arm_math.h ****  */
 289:DSP/Inc/arm_math.h **** #ifndef _ARM_MATH_H
 290:DSP/Inc/arm_math.h **** #define _ARM_MATH_H
 291:DSP/Inc/arm_math.h **** 
 292:DSP/Inc/arm_math.h **** /* Compiler specific diagnostic adjustment */
 293:DSP/Inc/arm_math.h **** #if   defined ( __CC_ARM )
 294:DSP/Inc/arm_math.h **** 
 295:DSP/Inc/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 296:DSP/Inc/arm_math.h **** 
 297:DSP/Inc/arm_math.h **** #elif defined ( __GNUC__ )
 298:DSP/Inc/arm_math.h **** #pragma GCC diagnostic push
 299:DSP/Inc/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 21


 300:DSP/Inc/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:DSP/Inc/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:DSP/Inc/arm_math.h **** 
 303:DSP/Inc/arm_math.h **** #elif defined ( __ICCARM__ )
 304:DSP/Inc/arm_math.h **** 
 305:DSP/Inc/arm_math.h **** #elif defined ( __TI_ARM__ )
 306:DSP/Inc/arm_math.h **** 
 307:DSP/Inc/arm_math.h **** #elif defined ( __CSMC__ )
 308:DSP/Inc/arm_math.h **** 
 309:DSP/Inc/arm_math.h **** #elif defined ( __TASKING__ )
 310:DSP/Inc/arm_math.h **** 
 311:DSP/Inc/arm_math.h **** #else
 312:DSP/Inc/arm_math.h ****   #error Unknown compiler
 313:DSP/Inc/arm_math.h **** #endif
 314:DSP/Inc/arm_math.h **** 
 315:DSP/Inc/arm_math.h **** 
 316:DSP/Inc/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 317:DSP/Inc/arm_math.h **** 
 318:DSP/Inc/arm_math.h **** #if defined(ARM_MATH_CM7)
 319:DSP/Inc/arm_math.h ****   #include "core_cm7.h"
 320:DSP/Inc/arm_math.h ****   #define ARM_MATH_DSP
 321:DSP/Inc/arm_math.h **** #elif defined (ARM_MATH_CM4)
 322:DSP/Inc/arm_math.h ****   #include "core_cm4.h"
 323:DSP/Inc/arm_math.h ****   #define ARM_MATH_DSP
 324:DSP/Inc/arm_math.h **** #elif defined (ARM_MATH_CM3)
 325:DSP/Inc/arm_math.h ****   #include "core_cm3.h"
 326:DSP/Inc/arm_math.h **** #elif defined (ARM_MATH_CM0)
 327:DSP/Inc/arm_math.h ****   #include "core_cm0.h"
 328:DSP/Inc/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 329:DSP/Inc/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 330:DSP/Inc/arm_math.h ****   #include "core_cm0plus.h"
 331:DSP/Inc/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 332:DSP/Inc/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 333:DSP/Inc/arm_math.h ****   #include "core_armv8mbl.h"
 334:DSP/Inc/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 335:DSP/Inc/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 336:DSP/Inc/arm_math.h ****   #include "core_armv8mml.h"
 337:DSP/Inc/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 338:DSP/Inc/arm_math.h ****     #define ARM_MATH_DSP
 339:DSP/Inc/arm_math.h ****   #endif
 340:DSP/Inc/arm_math.h **** #else
 341:DSP/Inc/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 342:DSP/Inc/arm_math.h **** #endif
 343:DSP/Inc/arm_math.h **** 
 344:DSP/Inc/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 345:DSP/Inc/arm_math.h **** #include "string.h"
 346:DSP/Inc/arm_math.h **** #include "math.h"
 347:DSP/Inc/arm_math.h **** #ifdef   __cplusplus
 348:DSP/Inc/arm_math.h **** extern "C"
 349:DSP/Inc/arm_math.h **** {
 350:DSP/Inc/arm_math.h **** #endif
 351:DSP/Inc/arm_math.h **** 
 352:DSP/Inc/arm_math.h **** 
 353:DSP/Inc/arm_math.h ****   /**
 354:DSP/Inc/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 355:DSP/Inc/arm_math.h ****    */
 356:DSP/Inc/arm_math.h **** 
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 22


 357:DSP/Inc/arm_math.h **** #define DELTA_Q31          (0x100)
 358:DSP/Inc/arm_math.h **** #define DELTA_Q15          0x5
 359:DSP/Inc/arm_math.h **** #define INDEX_MASK         0x0000003F
 360:DSP/Inc/arm_math.h **** #ifndef PI
 361:DSP/Inc/arm_math.h ****   #define PI               3.14159265358979f
 362:DSP/Inc/arm_math.h **** #endif
 363:DSP/Inc/arm_math.h **** 
 364:DSP/Inc/arm_math.h ****   /**
 365:DSP/Inc/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 366:DSP/Inc/arm_math.h ****    */
 367:DSP/Inc/arm_math.h **** 
 368:DSP/Inc/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 369:DSP/Inc/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 370:DSP/Inc/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 371:DSP/Inc/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 372:DSP/Inc/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 373:DSP/Inc/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 374:DSP/Inc/arm_math.h **** 
 375:DSP/Inc/arm_math.h ****   /**
 376:DSP/Inc/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 377:DSP/Inc/arm_math.h ****    */
 378:DSP/Inc/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 379:DSP/Inc/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 380:DSP/Inc/arm_math.h **** #define INPUT_SPACING         0xB60B61
 381:DSP/Inc/arm_math.h **** 
 382:DSP/Inc/arm_math.h ****   /**
 383:DSP/Inc/arm_math.h ****    * @brief Macro for Unaligned Support
 384:DSP/Inc/arm_math.h ****    */
 385:DSP/Inc/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 386:DSP/Inc/arm_math.h ****     #define ALIGN4
 387:DSP/Inc/arm_math.h **** #else
 388:DSP/Inc/arm_math.h ****   #if defined  (__GNUC__)
 389:DSP/Inc/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 390:DSP/Inc/arm_math.h ****   #else
 391:DSP/Inc/arm_math.h ****     #define ALIGN4 __align(4)
 392:DSP/Inc/arm_math.h ****   #endif
 393:DSP/Inc/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 394:DSP/Inc/arm_math.h **** 
 395:DSP/Inc/arm_math.h ****   /**
 396:DSP/Inc/arm_math.h ****    * @brief Error status returned by some functions in the library.
 397:DSP/Inc/arm_math.h ****    */
 398:DSP/Inc/arm_math.h **** 
 399:DSP/Inc/arm_math.h ****   typedef enum
 400:DSP/Inc/arm_math.h ****   {
 401:DSP/Inc/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 402:DSP/Inc/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 403:DSP/Inc/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 404:DSP/Inc/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 405:DSP/Inc/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 406:DSP/Inc/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 407:DSP/Inc/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 408:DSP/Inc/arm_math.h ****   } arm_status;
 409:DSP/Inc/arm_math.h **** 
 410:DSP/Inc/arm_math.h ****   /**
 411:DSP/Inc/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 412:DSP/Inc/arm_math.h ****    */
 413:DSP/Inc/arm_math.h ****   typedef int8_t q7_t;
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 23


 414:DSP/Inc/arm_math.h **** 
 415:DSP/Inc/arm_math.h ****   /**
 416:DSP/Inc/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 417:DSP/Inc/arm_math.h ****    */
 418:DSP/Inc/arm_math.h ****   typedef int16_t q15_t;
 419:DSP/Inc/arm_math.h **** 
 420:DSP/Inc/arm_math.h ****   /**
 421:DSP/Inc/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 422:DSP/Inc/arm_math.h ****    */
 423:DSP/Inc/arm_math.h ****   typedef int32_t q31_t;
 424:DSP/Inc/arm_math.h **** 
 425:DSP/Inc/arm_math.h ****   /**
 426:DSP/Inc/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 427:DSP/Inc/arm_math.h ****    */
 428:DSP/Inc/arm_math.h ****   typedef int64_t q63_t;
 429:DSP/Inc/arm_math.h **** 
 430:DSP/Inc/arm_math.h ****   /**
 431:DSP/Inc/arm_math.h ****    * @brief 32-bit floating-point type definition.
 432:DSP/Inc/arm_math.h ****    */
 433:DSP/Inc/arm_math.h ****   typedef float float32_t;
 434:DSP/Inc/arm_math.h **** 
 435:DSP/Inc/arm_math.h ****   /**
 436:DSP/Inc/arm_math.h ****    * @brief 64-bit floating-point type definition.
 437:DSP/Inc/arm_math.h ****    */
 438:DSP/Inc/arm_math.h ****   typedef double float64_t;
 439:DSP/Inc/arm_math.h **** 
 440:DSP/Inc/arm_math.h ****   /**
 441:DSP/Inc/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 442:DSP/Inc/arm_math.h ****    */
 443:DSP/Inc/arm_math.h **** #if   defined ( __CC_ARM )
 444:DSP/Inc/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 445:DSP/Inc/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 446:DSP/Inc/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 447:DSP/Inc/arm_math.h **** 
 448:DSP/Inc/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 449:DSP/Inc/arm_math.h ****   #define __SIMD32_TYPE int32_t
 450:DSP/Inc/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 451:DSP/Inc/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 452:DSP/Inc/arm_math.h **** 
 453:DSP/Inc/arm_math.h **** #elif defined ( __GNUC__ )
 454:DSP/Inc/arm_math.h ****   #define __SIMD32_TYPE int32_t
 455:DSP/Inc/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 456:DSP/Inc/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 457:DSP/Inc/arm_math.h **** 
 458:DSP/Inc/arm_math.h **** #elif defined ( __ICCARM__ )
 459:DSP/Inc/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 460:DSP/Inc/arm_math.h ****   #define CMSIS_UNUSED
 461:DSP/Inc/arm_math.h ****   #define CMSIS_INLINE
 462:DSP/Inc/arm_math.h **** 
 463:DSP/Inc/arm_math.h **** #elif defined ( __TI_ARM__ )
 464:DSP/Inc/arm_math.h ****   #define __SIMD32_TYPE int32_t
 465:DSP/Inc/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 466:DSP/Inc/arm_math.h ****   #define CMSIS_INLINE
 467:DSP/Inc/arm_math.h **** 
 468:DSP/Inc/arm_math.h **** #elif defined ( __CSMC__ )
 469:DSP/Inc/arm_math.h ****   #define __SIMD32_TYPE int32_t
 470:DSP/Inc/arm_math.h ****   #define CMSIS_UNUSED
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 24


 471:DSP/Inc/arm_math.h ****   #define CMSIS_INLINE
 472:DSP/Inc/arm_math.h **** 
 473:DSP/Inc/arm_math.h **** #elif defined ( __TASKING__ )
 474:DSP/Inc/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 475:DSP/Inc/arm_math.h ****   #define CMSIS_UNUSED
 476:DSP/Inc/arm_math.h ****   #define CMSIS_INLINE
 477:DSP/Inc/arm_math.h **** 
 478:DSP/Inc/arm_math.h **** #else
 479:DSP/Inc/arm_math.h ****   #error Unknown compiler
 480:DSP/Inc/arm_math.h **** #endif
 481:DSP/Inc/arm_math.h **** 
 482:DSP/Inc/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 483:DSP/Inc/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 484:DSP/Inc/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 485:DSP/Inc/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 486:DSP/Inc/arm_math.h **** 
 487:DSP/Inc/arm_math.h **** #if !defined (ARM_MATH_DSP)
 488:DSP/Inc/arm_math.h ****   /**
 489:DSP/Inc/arm_math.h ****    * @brief definition to pack two 16 bit values.
 490:DSP/Inc/arm_math.h ****    */
 491:DSP/Inc/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 492:DSP/Inc/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 493:DSP/Inc/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 494:DSP/Inc/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 495:DSP/Inc/arm_math.h **** 
 496:DSP/Inc/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 497:DSP/Inc/arm_math.h **** 
 498:DSP/Inc/arm_math.h ****    /**
 499:DSP/Inc/arm_math.h ****    * @brief definition to pack four 8 bit values.
 500:DSP/Inc/arm_math.h ****    */
 501:DSP/Inc/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 502:DSP/Inc/arm_math.h **** 
 503:DSP/Inc/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 504:DSP/Inc/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 505:DSP/Inc/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 506:DSP/Inc/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 507:DSP/Inc/arm_math.h **** #else
 508:DSP/Inc/arm_math.h **** 
 509:DSP/Inc/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 510:DSP/Inc/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 511:DSP/Inc/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 512:DSP/Inc/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 513:DSP/Inc/arm_math.h **** 
 514:DSP/Inc/arm_math.h **** #endif
 515:DSP/Inc/arm_math.h **** 
 516:DSP/Inc/arm_math.h **** 
 517:DSP/Inc/arm_math.h ****   /**
 518:DSP/Inc/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 519:DSP/Inc/arm_math.h ****    */
 520:DSP/Inc/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 587              		.loc 2 520 38 is_stmt 1 view .LVU202
 588              	.LBB7:
 521:DSP/Inc/arm_math.h ****   q63_t x)
 522:DSP/Inc/arm_math.h ****   {
 523:DSP/Inc/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 589              		.loc 2 523 5 view .LVU203
 590              		.loc 2 523 24 is_stmt 0 view .LVU204
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 25


 591 02e6 E517     		asrs	r5, r4, #31
 592              	.LVL97:
 593              		.loc 2 523 35 view .LVU205
 594 02e8 1A46     		mov	r2, r3
 595              	.LVL98:
 596              		.loc 2 523 45 view .LVU206
 597 02ea DB17     		asrs	r3, r3, #31
 598              	.LVL99:
 524:DSP/Inc/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 599              		.loc 2 524 44 view .LVU207
 600 02ec B3EBE47F 		cmp	r3, r4, asr #31
 601 02f0 02D0     		beq	.L7
 602              		.loc 2 524 44 discriminator 1 view .LVU208
 603 02f2 85F00042 		eor	r2, r5, #-2147483648
 604              	.LVL100:
 605              		.loc 2 524 44 discriminator 1 view .LVU209
 606 02f6 D243     		mvns	r2, r2
 607              	.L7:
 608              	.LVL101:
 609              		.loc 2 524 44 discriminator 1 view .LVU210
 610              	.LBE7:
 611              	.LBE6:
 612              		.loc 1 251 15 discriminator 1 view .LVU211
 613 02f8 059C     		ldr	r4, [sp, #20]
 614 02fa 44F8082B 		str	r2, [r4], #8
 252:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         *px++ = (q31_t) clip_q63_to_q31(sumImag1 >> 31);
 615              		.loc 1 252 9 is_stmt 1 view .LVU212
 616              		.loc 1 252 25 is_stmt 0 view .LVU213
 617 02fe 029B     		ldr	r3, [sp, #8]
 618 0300 DB0F     		lsrs	r3, r3, #31
 619 0302 0399     		ldr	r1, [sp, #12]
 620 0304 43EA4103 		orr	r3, r3, r1, lsl #1
 621              	.LVL102:
 622              	.LBB8:
 623              	.LBI8:
 520:DSP/Inc/arm_math.h ****   q63_t x)
 624              		.loc 2 520 38 is_stmt 1 view .LVU214
 625              	.LBB9:
 523:DSP/Inc/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 626              		.loc 2 523 5 view .LVU215
 523:DSP/Inc/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 627              		.loc 2 523 24 is_stmt 0 view .LVU216
 628 0308 CD17     		asrs	r5, r1, #31
 629              	.LVL103:
 523:DSP/Inc/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 630              		.loc 2 523 35 view .LVU217
 631 030a 1A46     		mov	r2, r3
 523:DSP/Inc/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 632              		.loc 2 523 45 view .LVU218
 633 030c DB17     		asrs	r3, r3, #31
 634              	.LVL104:
 635              		.loc 2 524 44 view .LVU219
 636 030e B3EBE17F 		cmp	r3, r1, asr #31
 637 0312 02D0     		beq	.L8
 638              		.loc 2 524 44 discriminator 1 view .LVU220
 639 0314 85F00042 		eor	r2, r5, #-2147483648
 640              	.LVL105:
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 26


 641              		.loc 2 524 44 discriminator 1 view .LVU221
 642 0318 D243     		mvns	r2, r2
 643              	.L8:
 644              	.LVL106:
 645              		.loc 2 524 44 discriminator 1 view .LVU222
 646              	.LBE9:
 647              	.LBE8:
 648              		.loc 1 252 15 discriminator 1 view .LVU223
 649 031a 059B     		ldr	r3, [sp, #20]
 650 031c 5A60     		str	r2, [r3, #4]
 253:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 254:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /* Update the pointer pIn2 to point to the  starting address of the next column */
 255:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         j++;
 651              		.loc 1 255 9 is_stmt 1 view .LVU224
 652              		.loc 1 255 10 is_stmt 0 view .LVU225
 653 031e 089B     		ldr	r3, [sp, #32]
 654 0320 0133     		adds	r3, r3, #1
 655 0322 9AB2     		uxth	r2, r3
 656 0324 0892     		str	r2, [sp, #32]
 657              	.LVL107:
 256:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         pIn2 = pSrcB->pData + 2U * j;
 658              		.loc 1 256 9 is_stmt 1 view .LVU226
 659              		.loc 1 256 21 is_stmt 0 view .LVU227
 660 0326 0A9B     		ldr	r3, [sp, #40]
 661 0328 5B68     		ldr	r3, [r3, #4]
 662              		.loc 1 256 14 view .LVU228
 663 032a 03EBC20A 		add	r10, r3, r2, lsl #3
 664              	.LVL108:
 257:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 258:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /* Decrement the column loop counter */
 259:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         col--;
 665              		.loc 1 259 9 is_stmt 1 view .LVU229
 666              		.loc 1 259 12 is_stmt 0 view .LVU230
 667 032e 079B     		ldr	r3, [sp, #28]
 668 0330 013B     		subs	r3, r3, #1
 669 0332 9BB2     		uxth	r3, r3
 670 0334 0793     		str	r3, [sp, #28]
 671              	.LVL109:
 260:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 261:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       } while (col > 0U);
 672              		.loc 1 261 20 is_stmt 1 view .LVU231
 673 0336 53B1     		cbz	r3, .L16
 252:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 674              		.loc 1 252 12 is_stmt 0 view .LVU232
 675 0338 0594     		str	r4, [sp, #20]
 676              	.LVL110:
 677              	.L9:
 119:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       {
 678              		.loc 1 119 7 is_stmt 1 view .LVU233
 122:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         sumImag1 = 0.0;
 679              		.loc 1 122 9 view .LVU234
 123:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 680              		.loc 1 123 9 view .LVU235
 126:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 681              		.loc 1 126 9 view .LVU236
 129:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 682              		.loc 1 129 9 view .LVU237
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 27


 129:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 683              		.loc 1 129 16 is_stmt 0 view .LVU238
 684 033a 069B     		ldr	r3, [sp, #24]
 685 033c 9B08     		lsrs	r3, r3, #2
 686 033e 0393     		str	r3, [sp, #12]
 687              	.LVL111:
 132:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         {
 688              		.loc 1 132 9 is_stmt 1 view .LVU239
 126:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 689              		.loc 1 126 14 is_stmt 0 view .LVU240
 690 0340 DDF824B0 		ldr	fp, [sp, #36]
 123:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 691              		.loc 1 123 18 view .LVU241
 692 0344 0023     		movs	r3, #0
 693 0346 1C46     		mov	r4, r3
 694 0348 0293     		str	r3, [sp, #8]
 695 034a 1846     		mov	r0, r3
 132:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         {
 696              		.loc 1 132 15 view .LVU242
 697 034c 77E7     		b	.L3
 698              	.LVL112:
 699              	.L16:
 262:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 263:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       /* Update the pointer pInA to point to the  starting address of the next row */
 264:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       i = i + numColsB;
 700              		.loc 1 264 9 view .LVU243
 701 034e DDF824E0 		ldr	lr, [sp, #36]
 702 0352 0B98     		ldr	r0, [sp, #44]
 703 0354 0C9A     		ldr	r2, [sp, #48]
 704              	.LVL113:
 705              		.loc 1 264 7 is_stmt 1 view .LVU244
 706              		.loc 1 264 9 is_stmt 0 view .LVU245
 707 0356 019B     		ldr	r3, [sp, #4]
 708              	.LVL114:
 709              		.loc 1 264 9 view .LVU246
 710 0358 C318     		adds	r3, r0, r3
 711 035a 98B2     		uxth	r0, r3
 712              	.LVL115:
 265:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       pInA = pInA + 2 * numColsA;
 713              		.loc 1 265 7 is_stmt 1 view .LVU247
 714              		.loc 1 265 12 is_stmt 0 view .LVU248
 715 035c 069B     		ldr	r3, [sp, #24]
 716 035e 0EEBC30E 		add	lr, lr, r3, lsl #3
 717              	.LVL116:
 266:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 267:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       /* Decrement the row loop counter */
 268:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       row--;
 718              		.loc 1 268 7 is_stmt 1 view .LVU249
 719              		.loc 1 268 10 is_stmt 0 view .LVU250
 720 0362 531E     		subs	r3, r2, #1
 721 0364 9AB2     		uxth	r2, r3
 722              	.LVL117:
 269:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 270:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     } while (row > 0U);
 723              		.loc 1 270 18 is_stmt 1 view .LVU251
 724 0366 9AB1     		cbz	r2, .L17
 725              	.LVL118:
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 28


 726              	.L10:
 104:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     {
 727              		.loc 1 104 5 view .LVU252
 107:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 728              		.loc 1 107 7 view .LVU253
 107:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 729              		.loc 1 107 10 is_stmt 0 view .LVU254
 730 0368 0D9B     		ldr	r3, [sp, #52]
 731 036a 03EBC003 		add	r3, r3, r0, lsl #3
 732              	.LVL119:
 110:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 733              		.loc 1 110 7 is_stmt 1 view .LVU255
 114:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 734              		.loc 1 114 7 view .LVU256
 114:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 735              		.loc 1 114 12 is_stmt 0 view .LVU257
 736 036e 0A99     		ldr	r1, [sp, #40]
 737 0370 D1F804A0 		ldr	r10, [r1, #4]
 738              	.LVL120:
 116:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 739              		.loc 1 116 7 is_stmt 1 view .LVU258
 110:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 740              		.loc 1 110 11 is_stmt 0 view .LVU259
 741 0374 DDF804B0 		ldr	fp, [sp, #4]
 116:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 742              		.loc 1 116 9 view .LVU260
 743 0378 4FF00009 		mov	r9, #0
 744 037c CDF824E0 		str	lr, [sp, #36]
 745 0380 0593     		str	r3, [sp, #20]
 746 0382 CDF81CB0 		str	fp, [sp, #28]
 747 0386 0B90     		str	r0, [sp, #44]
 748 0388 CDF82090 		str	r9, [sp, #32]
 749 038c 0C92     		str	r2, [sp, #48]
 750 038e D4E7     		b	.L9
 751              	.LVL121:
 752              	.L17:
 271:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 272:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     /* Set status as ARM_MATH_SUCCESS */
 273:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     status = ARM_MATH_SUCCESS;
 753              		.loc 1 273 12 view .LVU261
 754 0390 0020     		movs	r0, #0
 755              	.LVL122:
 756              	.L2:
 274:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   }
 275:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 276:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   /* Return to application */
 277:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   return (status);
 757              		.loc 1 277 3 is_stmt 1 view .LVU262
 278:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** }
 758              		.loc 1 278 1 is_stmt 0 view .LVU263
 759 0392 0FB0     		add	sp, sp, #60
 760              	.LCFI2:
 761              		.cfi_remember_state
 762              		.cfi_def_cfa_offset 36
 763              		@ sp needed
 764 0394 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 765              	.LVL123:
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 29


 766              	.L11:
 767              	.LCFI3:
 768              		.cfi_restore_state
  96:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   }
 769              		.loc 1 96 12 view .LVU264
 770 0398 6FF00200 		mvn	r0, #2
 771 039c F9E7     		b	.L2
 772              	.L12:
 773 039e 6FF00200 		mvn	r0, #2
 774 03a2 F6E7     		b	.L2
 775              	.LVL124:
 776              	.L13:
  96:DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   }
 777              		.loc 1 96 12 view .LVU265
 778 03a4 6FF00200 		mvn	r0, #2
 779 03a8 F3E7     		b	.L2
 780              		.cfi_endproc
 781              	.LFE139:
 783              		.text
 784              	.Letext0:
 785              		.file 3 "/Users/luban/.local/xPacks/arm-none-eabi-gcc/xpack-arm-none-eabi-gcc-13.2.1-1.1/arm-none-
 786              		.file 4 "/Users/luban/.local/xPacks/arm-none-eabi-gcc/xpack-arm-none-eabi-gcc-13.2.1-1.1/arm-none-
ARM GAS  /var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s 			page 30


DEFINED SYMBOLS
                            *ABS*:00000000 arm_mat_cmplx_mult_q31.c
/var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s:21     .text.arm_mat_cmplx_mult_q31:00000000 $t
/var/folders/ck/g3dcd5x55xs4107jgdl0snvr0000gn/T//ccn2gnMf.s:27     .text.arm_mat_cmplx_mult_q31:00000000 arm_mat_cmplx_mult_q31

NO UNDEFINED SYMBOLS
